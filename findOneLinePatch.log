
checking Cli/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/1/src/java/org/apache/commons/cli/CommandLine.java src/java/org/apache/commons/cli/CommandLine.java
19d18
< import java.util.HashMap;
23c22,23
< import java.util.Map;
---
> import java.util.Set;
> import java.util.HashSet;
46,47c46
<     private Map options = new HashMap();
<     private Map names = new HashMap();
---
>     private Set options = new HashSet();
51d49
<     private Map hashcodeMap = new HashMap();
69c67
<         return options.containsKey(opt);
---
>         return options.contains( resolveOption(opt));
93c91,92
<         if (!options.containsKey(opt))
---
>         Option option = resolveOption(opt);
>         if (option == null)
98c97
<         Object type = ((Option) options.get(opt)).getType();
---
>         Object type = option.getType();
149,152c148
<         opt = Util.stripLeadingHyphens(opt);
< 
<         String key = opt;
<         if (names.containsKey(opt))
---
>         Option key = resolveOption( opt );
153a150
>         if (options.contains(key))
155c152
<             key = (String) names.get(opt);
---
>             return key.getValues();
158,161d154
<         if (options.containsKey(key))
<         {
<             return ((Option) options.get(key)).getValues();
<         }
169a163,176
>     private Option resolveOption( String opt )
>     {
>         opt = Util.stripLeadingHyphens(opt);
>         for ( Iterator it = options.iterator(); it.hasNext(); )
>         {
>             Option option = (Option) it.next();
>             if (opt.equals(option.getOpt()))
>             {
>                 return option;
>             }
>             if (opt.equals( option.getLongOpt()))
>             {
>                 return option;
>         }
170a178,180
>         }
>         return null;
>     }
278,288c288
<         hashcodeMap.put(new Integer(opt.hashCode()), opt);
<         String key = opt.getKey();
<         if (key == null)
<         {
<             key = opt.getLongOpt();
<         }
<         else
<         {
<             names.put(opt.getLongOpt(), key);
<         }
<         options.put(key, opt);
---
>         options.add(opt);
299c299
<         return hashcodeMap.values().iterator();
---
>         return options.iterator();
309c309
<         Collection processed = options.values();
---
>         Collection processed = options;
317c317
< }
---
> }
\ No newline at end of file
Cli-1 is multi-line patch!

checking Cli/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/10/src/java/org/apache/commons/cli/Parser.java src/java/org/apache/commons/cli/Parser.java
18a19
> import java.util.ArrayList;
46c47
<         this.requiredOptions = options.getRequiredOptions();
---
>         this.requiredOptions = new ArrayList(options.getRequiredOptions());
Cli-10 is multi-line patch!

checking Cli/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/11/src/java/org/apache/commons/cli/HelpFormatter.java src/java/org/apache/commons/cli/HelpFormatter.java
632c632
<         if (option.hasArg() && (option.getArgName() != null))
---
>         if (option.hasArg() && option.hasArgName())
Cli-11 is one-line patch!

checking Cli/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/12/src/java/org/apache/commons/cli/GnuParser.java src/java/org/apache/commons/cli/GnuParser.java
81c81
<                     if (options.hasOption(arg.substring(0, 2)))
---
>                     if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
83a84,88
>                         tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
>                         tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
>                     }
>                     else if (options.hasOption(arg.substring(0, 2)))
>                     {
Cli-12 is multi-line patch!

checking Cli/13
Cli-13 is multi-file patch!

checking Cli/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/14/src/java/org/apache/commons/cli2/option/GroupImpl.java src/java/org/apache/commons/cli2/option/GroupImpl.java
250,252d249
<             if (validate) {
<                 option.validate(commandLine);
<             }
260a258,259
>                 validate = true;
>             }
261a261
>             if (validate) {
Cli-14 is multi-line patch!

checking Cli/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/15/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java
117,118c117,118
<         if ((valueList == null) || valueList.isEmpty()) {
<             valueList = defaultValues;
---
>         if (defaultValues == null || defaultValues.isEmpty()) {
>             defaultValues = (List) this.defaultValues.get(option);
122,124c122,125
<         if ((valueList == null) || valueList.isEmpty()) {
<             valueList = (List) this.defaultValues.get(option);
<         }
---
>         if (defaultValues != null && !defaultValues.isEmpty()) {
>             if (valueList == null || valueList.isEmpty()) {
>                 valueList = defaultValues;
>             } else {
126a128
>                 if (defaultValues.size() > valueList.size()) {
127a130,136
>                     valueList = new ArrayList(valueList);
>                     for (int i=valueList.size(); i<defaultValues.size(); i++) {
>                         valueList.add(defaultValues.get(i));
>                     }
>                 }
>             }
>         }
Cli-15 is multi-line patch!

checking Cli/16
Cli-16 is multi-file patch!

checking Cli/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/17/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
302a303
>                 break;
Cli-17 is one-line patch!

checking Cli/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/18/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
128c128
<                 processSingleHyphen(token);
---
>                 tokens.add(token);
213,216d212
<     private void processSingleHyphen(String hyphen)
<     {
<         tokens.add(hyphen);
<     }
240a237
>             tokens.add(token);
Cli-18 is multi-line patch!

checking Cli/19
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/19/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
232d231
<             tokens.add(token);
237d235
<             tokens.add(token);
238a237,238
> 
>         tokens.add(token);
Cli-19 is multi-line patch!

checking Cli/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/2/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
305c305,306
<                 tokens.add("-" + ch);
---
>                 tokens.add(token);
>                 break;
309c310
< }
---
> }
\ No newline at end of file
Cli-2 is multi-line patch!

checking Cli/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/20/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
114c114,117
<                 if (token.indexOf('=') != -1)
---
>                 int pos = token.indexOf('=');
>                 String opt = pos == -1 ? token : token.substring(0, pos); // --foo
> 
>                 if (!options.hasOption(opt) && stopAtNonOption)
116,117c119
<                     tokens.add(token.substring(0, token.indexOf('=')));
<                     tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
---
>                     process(token);
121c123,126
<                     tokens.add(token);
---
>                     tokens.add(opt);
>                     if (pos != -1) {
>                         tokens.add(token.substring(pos + 1));
>                     }
Cli-20 is multi-line patch!

checking Cli/21
Cli-21 is multi-file patch!

checking Cli/22
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/22/src/java/org/apache/commons/cli/PosixParser.java src/java/org/apache/commons/cli/PosixParser.java
40a41
>     private Option currentOption;
116c117
<                     processNonOptionToken(token);
---
>                     processNonOptionToken(token, stopAtNonOption);
119a121
>                     currentOption = options.getOption(opt);
146,149d147
<             else if (stopAtNonOption)
<             {
<                 processNonOptionToken(token);
<             }
152c150
<                 tokens.add(token);
---
>                 processNonOptionToken(token, stopAtNonOption);
184c182
<     private void processNonOptionToken(String value)
---
>     private void processNonOptionToken(String value, boolean stopAtNonOption)
185a184,185
>         if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))
>         {
187a188
>         }
210a212,215
>         if (options.hasOption(token))
>         {
>             currentOption = options.getOption(token);
>         }
243d247
<         Option currentOption;
262c266
<                 processNonOptionToken(token.substring(i));
---
>                 processNonOptionToken(token.substring(i), true);
Cli-22 is multi-line patch!

checking Cli/23
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/23/src/java/org/apache/commons/cli/HelpFormatter.java src/java/org/apache/commons/cli/HelpFormatter.java
824d823
<             int lastPos = pos;
833,836c832,837
<             } else
<             if (pos == lastPos)
<             {
<                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
---
>             }
>             
>             if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {
>                 sb.append(text);
> 
>                 return sb;
Cli-23 is multi-line patch!

checking Cli/24
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/24/src/java/org/apache/commons/cli/HelpFormatter.java src/java/org/apache/commons/cli/HelpFormatter.java
825,826c825
<             throw new IllegalStateException("Total width is less than the width of the argument and indent " + 
<                                             "- no room for the description");
---
>             nextLineTabStop = width - 1;
Cli-24 is multi-line patch!

checking Cli/25
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/25/src/java/org/apache/commons/cli/HelpFormatter.java src/java/org/apache/commons/cli/HelpFormatter.java
825c825
<             nextLineTabStop = width - 1;
---
>             nextLineTabStop = 1;
Cli-25 is one-line patch!

checking Cli/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/26/src/java/org/apache/commons/cli/OptionBuilder.java src/java/org/apache/commons/cli/OptionBuilder.java
347a348,349
>         Option option = null;
>         try {
349c351
<         Option option = new Option(opt, description);
---
>             option = new Option(opt, description);
358a361
>         } finally {
360a364
>         }
Cli-26 is multi-line patch!

checking Cli/27
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/27/src/java/org/apache/commons/cli/OptionGroup.java src/java/org/apache/commons/cli/OptionGroup.java
98c98
<         if (selected == null || selected.equals(option.getOpt()))
---
>         if (selected == null || selected.equals(option.getKey()))
100c100
<             selected = option.getOpt();
---
>             selected = option.getKey();
Cli-27 is multi-line patch!

checking Cli/28
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/28/src/java/org/apache/commons/cli/Parser.java src/java/org/apache/commons/cli/Parser.java
290c290
<                     break;
---
>                     continue;
Cli-28 is one-line patch!

checking Cli/29
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/29/src/java/org/apache/commons/cli/Util.java src/java/org/apache/commons/cli/Util.java
65,68d64
<         if (str.startsWith("\""))
<         {
<             str = str.substring(1, str.length());
<         }
70c66
<         if (str.endsWith("\""))
---
>         if (length > 1 && str.startsWith("\"") && str.endsWith("\"") && str.substring(1, length - 1).indexOf('"') == -1)
72c68
<             str = str.substring(0, length - 1);
---
>             str = str.substring(1, length - 1);
Cli-29 is multi-line patch!

checking Cli/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/3/src/java/org/apache/commons/cli/TypeHandler.java src/java/org/apache/commons/cli/TypeHandler.java
25d24
< import org.apache.commons.lang.math.NumberUtils;
162c161,171
<             return NumberUtils.createNumber(str);
---
>             if( str != null )
>             {
>                 if( str.indexOf('.') != -1 )
>                 {
>                     return Double.valueOf(str);
>                 }
>                 else
>                 {
>                     return Long.valueOf(str);
>                 }
>             }
Cli-3 is multi-line patch!

checking Cli/30
Cli-30 is multi-file patch!

checking Cli/31
Cli-31 is multi-file patch!

checking Cli/32
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/32/src/main/java/org/apache/commons/cli/HelpFormatter.java src/main/java/org/apache/commons/cli/HelpFormatter.java
937,941c937
<         while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
<                && (c != '\n') && (c != '\r'))
<         {
<             ++pos;
<         }        
---
>         
Cli-32 is multi-line patch!

checking Cli/33
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/33/src/main/java/org/apache/commons/cli/HelpFormatter.java src/main/java/org/apache/commons/cli/HelpFormatter.java
730c730
<         renderWrappedText(sb, width, nextLineTabStop, text);
---
>         renderWrappedTextBlock(sb, width, nextLineTabStop, text);
899a900,913
>     private StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text) {
>         try {
>             BufferedReader in = new BufferedReader(new StringReader(text));
>             String line;
>             boolean firstLine = true;
>             while ((line = in.readLine()) != null) {
>                 if (!firstLine) {
>                     sb.append(getNewLine());
>                 } else {
>                     firstLine = false;
>                 }
>                 renderWrappedText(sb, width, nextLineTabStop, line);
>             }
>         } catch (IOException e) {
900a915
>         }
901a917,918
>         return sb;
>     }
Cli-33 is multi-line patch!

checking Cli/34
Cli-34 is multi-file patch!

checking Cli/35
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/35/src/main/java/org/apache/commons/cli/Options.java src/main/java/org/apache/commons/cli/Options.java
239a240,242
>         if(longOpts.keySet().contains(opt)) {
>             return Collections.singletonList(opt);
>         }
Cli-35 is multi-line patch!

checking Cli/36
Cli-36 is multi-file patch!

checking Cli/37
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/37/src/main/java/org/apache/commons/cli/DefaultParser.java src/main/java/org/apache/commons/cli/DefaultParser.java
302c302,305
<         return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
---
>         if (!token.startsWith("-") || token.length() == 1)
>         {
>             return false;
>         }
304a308,310
>         int pos = token.indexOf("=");
>         String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
>         return options.hasShortOption(optName);
Cli-37 is multi-line patch!

checking Cli/38
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/38/src/main/java/org/apache/commons/cli/DefaultParser.java src/main/java/org/apache/commons/cli/DefaultParser.java
310c310,313
<         return options.hasShortOption(optName);
---
>         if (options.hasShortOption(optName))
>         {
>             return true;
>         }
311a315
>         return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));
Cli-38 is multi-line patch!

checking Cli/39
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/39/src/main/java/org/apache/commons/cli/TypeHandler.java src/main/java/org/apache/commons/cli/TypeHandler.java
92c92
<             return createFile(str);
---
>             return openFile(str);
233a234,244
>     public static FileInputStream openFile(String str) throws ParseException
>     {
>         try
>         {
>             return new FileInputStream(str);
>         }
>         catch (FileNotFoundException e)
>         {
>             throw new ParseException("Unable to find file: " + str);
>         }
>     }
Cli-39 is multi-line patch!

checking Cli/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/4/src/java/org/apache/commons/cli/Parser.java src/java/org/apache/commons/cli/Parser.java
298c298,300
<             StringBuffer buff = new StringBuffer();
---
>             StringBuffer buff = new StringBuffer("Missing required option");
>             buff.append(requiredOptions.size() == 1 ? "" : "s");
>             buff.append(": ");
Cli-4 is multi-line patch!

checking Cli/40
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/40/src/main/java/org/apache/commons/cli/TypeHandler.java src/main/java/org/apache/commons/cli/TypeHandler.java
103c103
<             return null;
---
>             throw new ParseException("Unable to handle the class: " + clazz);
Cli-40 is one-line patch!

checking Cli/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/5/src/java/org/apache/commons/cli/Util.java src/java/org/apache/commons/cli/Util.java
35a36,38
>         if (str == null) {
>             return null;
>         }
Cli-5 is multi-line patch!

checking Cli/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java src/java/org/apache/commons/cli2/builder/PatternBuilder.java
19d18
< import java.util.HashSet;
20a20
> import java.util.LinkedHashSet;
67c67
<     private final Set options = new HashSet();
---
>     private final Set options = new LinkedHashSet();
Cli-7 is multi-line patch!

checking Cli/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/8/src/java/org/apache/commons/cli/HelpFormatter.java src/java/org/apache/commons/cli/HelpFormatter.java
812c812
<             pos = findWrapPos(text, width, nextLineTabStop);
---
>             pos = findWrapPos(text, width, 0);
Cli-8 is one-line patch!

checking Cli/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Cli/9/src/java/org/apache/commons/cli/Parser.java src/java/org/apache/commons/cli/Parser.java
319a320
>                 buff.append(", ");
322c323
<             throw new MissingOptionException(buff.toString());
---
>             throw new MissingOptionException(buff.substring(0, buff.length() - 2));
Cli-9 is multi-line patch!

checking Codec/1
Codec-1 is multi-file patch!

checking Codec/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/10/src/java/org/apache/commons/codec/language/Caverphone.java src/java/org/apache/commons/codec/language/Caverphone.java
76c76
<         txt = txt.replaceAll("^mb", "m2");
---
>         txt = txt.replaceAll("mb$", "m2");
Codec-10 is one-line patch!

checking Codec/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java
69a70
>     private static final byte CR = 13;
70a72
>     private static final byte LF = 10;
72a75
>     private static final int SAFE_LENGTH = 73;
114c117
<     private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {
---
>     private static final int encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {
119a123
>         return 3;
131a136,142
>     private static int getUnsignedOctet(final int index, final byte[] bytes) {
>         int b = bytes[index];
>         if (b < 0) {
>             b = 256 + b;
>         }
>         return b;
>     }
143a155,163
>     private static int encodeByte(final int b, final boolean encode,
>                                   final ByteArrayOutputStream buffer) {
>         if (encode) {
>             return encodeQuotedPrintable(b, buffer);
>         } else {
>             buffer.write(b);
>             return 1;
>         }
>     }
151a172,174
>     private static boolean isWhitespace(final int b) {
>         return b == SPACE || b == TAB;
>     }
174a198
>         int pos = 1;
176a201,203
>         for (int i = 0; i < bytes.length - 3; i++) {
>             int b = getUnsignedOctet(i, bytes);
>             if (pos < SAFE_LENGTH) {
178,184c205
<         for (byte c : bytes) {
<             int b = c;
<             if (b < 0) {
<                 b = 256 + b;
<             }
<             if (printable.get(b)) {
<                 buffer.write(b);
---
>                 pos += encodeByte(b, !printable.get(b), buffer);
186a208
>                 encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);
189c211,214
<                 encodeQuotedPrintable(b, buffer);
---
>                 buffer.write(ESCAPE_CHAR);
>                 buffer.write(CR);
>                 buffer.write(LF);
>                 pos = 1;
194a220,222
>         int b = getUnsignedOctet(bytes.length - 3, bytes);
>         boolean encode = !printable.get(b) || (isWhitespace(b) && pos > SAFE_LENGTH - 5);
>         pos += encodeByte(b, encode, buffer);
198a227,233
>         if (pos > SAFE_LENGTH - 2) {
>             buffer.write(ESCAPE_CHAR);
>             buffer.write(CR);
>             buffer.write(LF);
>         }
>         for (int i = bytes.length - 2; i < bytes.length; i++) {
>             b = getUnsignedOctet(i, bytes);
199a235,237
>             encode = !printable.get(b) || (i > bytes.length - 2 && isWhitespace(b));
>             encodeByte(b, encode, buffer);
>         }
229c267,270
<                     int u = Utils.digit16(bytes[++i]);
---
>                     if (bytes[++i] == CR) {
>                         continue;
>                     }
>                     int u = Utils.digit16(bytes[i]);
235c276
<             } else {
---
>             } else if (b != CR && b != LF) {
Codec-11 is multi-line patch!

checking Codec/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java
141a142,146
>     @Override
>     public long skip(long n) throws IOException {
>         if (n < 0) {
>             throw new IllegalArgumentException("Negative skip length");
>         }
143a149,151
>         final byte[] b = new byte[512];
>         final int max = (int) Math.min(n, Integer.MAX_VALUE);
>         int total = 0;
144a153,166
>         while (total < max) {
>             int len = max - total;
>             if (len > b.length) {
>                 len = b.length;
>             }
>             len = read(b, 0, len);
>             if (len == EOF) {
>                 break;
>             }
>             total += len;
>         }
> 
>         return total;
>     }
151a174
>     public int available() throws IOException {
157a181,186
>         if (baseNCodec.eof) {
>             return 0;
>         } else {
>             return 1;
>         }
>     }
Codec-12 is multi-line patch!

checking Codec/13
Codec-13 is multi-file patch!

checking Codec/14
Codec-14 is multi-file patch!

checking Codec/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/15/src/main/java/org/apache/commons/codec/language/Soundex.java src/main/java/org/apache/commons/codec/language/Soundex.java
188,192c188,190
<             final char hwChar = str.charAt(index - 1);
<             if ('H' == hwChar || 'W' == hwChar) {
<                 final char preHWChar = str.charAt(index - 2);
<                 final char firstCode = this.map(preHWChar);
<                 if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
---
>             for (int i=index-1 ; i>=0 ; i--) {
>                 final char prevChar = str.charAt(i);
>                 if (this.map(prevChar)==mappedChar) {
193a192,194
>                 }
>                 if ('H'!=prevChar && 'W'!=prevChar) {
>                     break;
Codec-15 is multi-line patch!

checking Codec/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/16/src/main/java/org/apache/commons/codec/binary/Base32.java src/main/java/org/apache/commons/codec/binary/Base32.java
99c99
<             25, 26, 27, 28, 29, 30, 31, 32,
---
>             25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V
Codec-16 is one-line patch!

checking Codec/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/17/src/main/java/org/apache/commons/codec/binary/StringUtils.java src/main/java/org/apache/commons/codec/binary/StringUtils.java
339c339
<         return new String(bytes, Charsets.ISO_8859_1);
---
>         return newString(bytes, Charsets.ISO_8859_1);
Codec-17 is one-line patch!

checking Codec/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/18/src/main/java/org/apache/commons/codec/binary/StringUtils.java src/main/java/org/apache/commons/codec/binary/StringUtils.java
81c81
<         return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
---
>         return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());
Codec-18 is one-line patch!

checking Codec/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/2/src/java/org/apache/commons/codec/binary/Base64.java src/java/org/apache/commons/codec/binary/Base64.java
446c446
<             if (lineLength > 0) {
---
>             if (lineLength > 0 && pos > 0) {
Codec-2 is one-line patch!

checking Codec/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/3/src/java/org/apache/commons/codec/language/DoubleMetaphone.java src/java/org/apache/commons/codec/language/DoubleMetaphone.java
455c455
<             } else if (contains(value, index + 1, 4, "IER")) {
---
>             } else if (contains(value, index + 1, 3, "IER")) {
Codec-3 is one-line patch!

checking Codec/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/4/src/java/org/apache/commons/codec/binary/Base64.java src/java/org/apache/commons/codec/binary/Base64.java
225c225
<         this(false);
---
>         this(0);
Codec-4 is one-line patch!

checking Codec/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/5/src/java/org/apache/commons/codec/binary/Base64.java src/java/org/apache/commons/codec/binary/Base64.java
585a586,588
>             if (buffer == null || buffer.length - pos < decodeSize) {
>                 resizeBuffer();
>             }
Codec-5 is multi-line patch!

checking Codec/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/6/src/java/org/apache/commons/codec/binary/Base64InputStream.java src/java/org/apache/commons/codec/binary/Base64InputStream.java
147a148
>             int readLen = 0;
163a165
>             while (readLen == 0) {
178c180,182
<             return base64.readResults(b, offset, len);
---
>                 readLen = base64.readResults(b, offset, len);
>             }
>             return readLen;
Codec-6 is multi-line patch!

checking Codec/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/7/src/java/org/apache/commons/codec/binary/Base64.java src/java/org/apache/commons/codec/binary/Base64.java
670c670
<         return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
---
>         return StringUtils.newStringUtf8(encodeBase64(binaryData, false));
Codec-7 is one-line patch!

checking Codec/8
Codec-8 is multi-file patch!

checking Codec/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Codec/9/src/java/org/apache/commons/codec/binary/Base64.java src/java/org/apache/commons/codec/binary/Base64.java
827c827
<         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
---
>         long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);
Codec-9 is one-line patch!

checking Collections/25
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Collections/25/src/main/java/org/apache/commons/collections4/IteratorUtils.java src/main/java/org/apache/commons/collections4/IteratorUtils.java
605c605,607
<         return new CollatingIterator<E>(comparator, iterator1, iterator2);
---
>         @SuppressWarnings("unchecked")
>         final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;
>         return new CollatingIterator<E>(comp, iterator1, iterator2);
626c628,630
<         return new CollatingIterator<E>(comparator, iterators);
---
>         @SuppressWarnings("unchecked")
>         final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;
>         return new CollatingIterator<E>(comp, iterators);
648c652,654
<         return new CollatingIterator<E>(comparator, iterators);
---
>         @SuppressWarnings("unchecked")
>         final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;
>         return new CollatingIterator<E>(comp, iterators);
Collections-25 is multi-line patch!

checking Collections/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Collections/26/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java
277c277
<     private Object readResolve() {
---
>     protected Object readResolve() {
Collections-26 is one-line patch!

checking Collections/27
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Collections/27/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java src/main/java/org/apache/commons/collections4/map/MultiValueMap.java
567a568,574
>         private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException {
>             is.defaultReadObject();
>             // ensure that the de-serialized class is a Collection, COLLECTIONS-580
>             if (clazz != null && !Collection.class.isAssignableFrom(clazz)) {
>                 throw new UnsupportedOperationException();
>             }
>         }
Collections-27 is multi-line patch!

checking Collections/28
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Collections/28/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
2261a2262,2271
>         @Override
>         public void clear() {
>             Iterator<Map.Entry<K, V>> it = AbstractPatriciaTrie.this.entrySet().iterator();
>             Set<K> currentKeys = keySet();
>             while (it.hasNext()) {
>                 if (currentKeys.contains(it.next().getKey())) {
>                     it.remove();
>                 }
>             }
>         }
Collections-28 is multi-line patch!

checking Compress/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/1/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
345a346
>             this.finish();
Compress-1 is one-line patch!

checking Compress/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
808,809c808,812
<         for (ZipArchiveEntry ze : entries.keySet()) {
<             OffsetEntry offsetEntry = entries.get(ze);
---
>         Map<ZipArchiveEntry, OffsetEntry> origMap =
>             new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries);
>         entries.clear();
>         for (ZipArchiveEntry ze : origMap.keySet()) {
>             OffsetEntry offsetEntry = origMap.get(ze);
841a845
>             entries.put(ze, offsetEntry);
Compress-10 is multi-line patch!

checking Compress/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
239a240
>             if (signatureLength >= 512) {
247a249
>             }
Compress-11 is multi-line patch!

checking Compress/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/12/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
198c198,204
<         currEntry = new TarArchiveEntry(headerBuf);
---
>         try {
>             currEntry = new TarArchiveEntry(headerBuf);
>         } catch (IllegalArgumentException e) {
>             IOException ioe = new IOException("Error detected parsing the header");
>             ioe.initCause(e);
>             throw ioe;
>         }
Compress-12 is multi-line patch!

checking Compress/13
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/13/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
511a512,515
>         if (name != null && getPlatform() == PLATFORM_FAT
>             && name.indexOf("/") == -1) {
>             name = name.replace('\\', '/');
>         }
Compress-13 is multi-line patch!

checking Compress/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
65,72c65
<         boolean allNUL = true;
<         for (int i = start; i < end; i++){
<             if (buffer[i] != 0){
<                 allNUL = false;
<                 break;
<             }
<         }
<         if (allNUL) {
---
>         if (buffer[start] == 0) {
Compress-14 is multi-line patch!

checking Compress/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
669,673c669,672
<             if (otherComment != null) {
<                 return false;
<             }
<         } else if (!myComment.equals(otherComment)) {
<             return false;
---
>             myComment = "";
>         }
>         if (otherComment == null) {
>             otherComment = "";
675a675
>             && myComment.equals(otherComment)
Compress-15 is multi-line patch!

checking Compress/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/16/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
244c244
<                     tais.getNextEntry();
---
>                     if (tais.getNextTarEntry().isCheckSumOK()) {
245a246
>                     }
Compress-16 is multi-line patch!

checking Compress/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/17/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
135c135
<         if (trailer == 0 || trailer == ' '){
---
>         while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
136a137
>             trailer = buffer[end - 1];
Compress-17 is multi-line patch!

checking Compress/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
456a457
>         while (name.endsWith("/")) {
458a460,461
>             name = name.substring(0, name.length() - 1);
>         }
Compress-18 is multi-line patch!

checking Compress/19
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/19/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java
259c259
<             if (rawCentralDirectoryData.length != expectedLength) {
---
>             if (rawCentralDirectoryData.length < expectedLength) {
Compress-19 is one-line patch!

checking Compress/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
41a42
>     private ArArchiveEntry currentEntry = null;
45a47
>     private long entryOffset = -1;
59a62,66
>         if (currentEntry != null) {
>             final long entryEnd = entryOffset + currentEntry.getLength();
>             while (offset < entryEnd) {
>                 int x = read();
>                 if (x == -1) {
61a69,73
>                     return null;
>                 }
>             }
>             currentEntry = null;
>         }
76a89,90
>         if (offset % 2 != 0) {
>             if (read() < 0) {
77a92,94
>                 return null;
>             }
>         }
83,85d99
<         if (offset % 2 != 0) {
<             read();
<         }
114c128,129
<         return new ArArchiveEntry(new String(name).trim(),
---
>         entryOffset = offset;
>         currentEntry = new ArArchiveEntry(new String(name).trim(),
116a132
>         return currentEntry;
128a145
>         currentEntry = null;
132,134c149,151
<         final int ret = input.read();
<         offset += (ret > 0 ? 1 : 0);
<         return ret;
---
>         byte[] single = new byte[1];
>         int num = read(single, 0, 1);
>         return num == -1 ? -1 : single[0] & 0xff;
142a160,167
>         if (currentEntry != null) {
>             final long entryEnd = entryOffset + currentEntry.getLength();
>             if (len > 0 && entryEnd > offset) {
>                 toRead = (int) Math.min(len, entryEnd - offset);
>             } else {
>                 return -1;
>             }
>         }
Compress-2 is multi-line patch!

checking Compress/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
331c331
<         if (mode != 0){
---
>         if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0
347c347
<         if (mode == 0 && !name.equals(CPIO_TRAILER)){
---
>         if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
361c361
<         if (mode != 0) {
---
>         if (CpioUtil.fileType(mode) != 0) {
373c373
<         if (mode == 0 && !name.equals(CPIO_TRAILER)){
---
>         if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
387c387
<         if (mode != 0){
---
>         if (CpioUtil.fileType(mode) != 0){
399c399
<         if (mode == 0 && !name.equals(CPIO_TRAILER)){
---
>         if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){
Compress-20 is multi-line patch!

checking Compress/21
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
639,640c639
<             --shift;
<             if (shift == 0) {
---
>             if (--shift < 0) {
646c645
<         if (length > 0 && shift > 0) {
---
>         if (shift != 7) {
Compress-21 is multi-line patch!

checking Compress/22
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
67d66
<     private int currentChar = -1;
135d133
<         setupBlock();
199d196
<         final int retChar = this.currentChar;
205c202
<             throw new IllegalStateException();
---
>             return setupBlock();
211,212c208
<             setupRandPartB();
<             break;
---
>             return setupRandPartB();
215,216c211
<             setupRandPartC();
<             break;
---
>             return setupRandPartC();
222,223c217
<             setupNoRandPartB();
<             break;
---
>             return setupNoRandPartB();
226,227c220
<             setupNoRandPartC();
<             break;
---
>             return setupNoRandPartC();
232d224
<         return retChar;
853d844
<             this.currentChar = su_ch2Shadow;
871d861
<             this.currentChar = su_ch2Shadow;
913d902
<             this.currentChar = this.su_ch2;
942d930
<             this.currentChar = su_ch2Shadow;
Compress-22 is multi-line patch!

checking Compress/23
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/23/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
112c112
<                 dictSize |= (coder.properties[i + 1] << (8 * i));
---
>                 dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);
Compress-23 is one-line patch!

checking Compress/24
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/24/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
129,136c129
<         if (trailer == 0 || trailer == ' '){
<             end--;
<         } else {
<             throw new IllegalArgumentException(
<                     exceptionMessage(buffer, offset, length, end-1, trailer));
<         }
<         trailer = buffer[end - 1];
<         while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
---
>         while (start < end && (trailer == 0 || trailer == ' ')) {
138a132,135
>         }
>         if (start == end) {
>             throw new IllegalArgumentException(
>                     exceptionMessage(buffer, offset, length, start, trailer));
Compress-24 is multi-line patch!

checking Compress/25
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
183a184
>         buf.limit(0);
Compress-25 is one-line patch!

checking Compress/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/26/src/main/java/org/apache/commons/compress/utils/IOUtils.java src/main/java/org/apache/commons/compress/utils/IOUtils.java
103a104,114
>         if (numToSkip > 0) {
>             byte[] skipBuf = new byte[SKIP_BUF_SIZE];
>             while (numToSkip > 0) {
>                 int read = readFully(input, skipBuf, 0,
>                                      (int) Math.min(numToSkip, SKIP_BUF_SIZE));
>                 if (read < 1) {
>                     break;
>                 }
>                 numToSkip -= read;
>             }
>         }
Compress-26 is multi-line patch!

checking Compress/27
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
133,136d132
<         if (start == end) {
<             throw new IllegalArgumentException(
<                     exceptionMessage(buffer, offset, length, start, trailer));
<         }
Compress-27 is multi-line patch!

checking Compress/28
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
583d582
<         count(totalRead);
585a585,587
>             if (numToRead > 0) {
>                 throw new IOException("Truncated TAR archive");
>             }
587a590
>             count(totalRead);
Compress-28 is multi-line patch!

checking Compress/29
Compress-29 is multi-file patch!

checking Compress/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
54a55
>     private boolean haveUnclosedEntry = false;
111a113,115
>         if(haveUnclosedEntry) {
>             throw new IOException("This archives contains unclosed entries.");
>         }
186a191
>         haveUnclosedEntry = true;
216a222
>         haveUnclosedEntry = false;
Compress-3 is multi-line patch!

checking Compress/30
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/30/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java
167a168,170
>         if (len == 0) {
>             return 0;
>         }
Compress-30 is multi-line patch!

checking Compress/31
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
135,137d134
<             if (currentByte == 0) {
<                 break;
<             }
Compress-31 is multi-line patch!

checking Compress/32
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/32/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
501c501
<                 currEntry.setGroupId(Integer.parseInt(val));
---
>                 currEntry.setGroupId(Long.parseLong(val));
505c505
<                 currEntry.setUserId(Integer.parseInt(val));
---
>                 currEntry.setUserId(Long.parseLong(val));
Compress-32 is multi-line patch!

checking Compress/33
Compress-33 is multi-file patch!

checking Compress/34
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java
57a58
>     private static final ZipShort ZERO = new ZipShort(0);
146c147
<         return getLocalFileDataLength();
---
>         return ZERO;
Compress-34 is multi-line patch!

checking Compress/35
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
594c594
<         long storedSum = 0;
---
>         long storedSum = parseOctal(header, CHKSUM_OFFSET, CHKSUMLEN);
602,606d601
<                 if ('0' <= b && b <= '7' && digits++ < 6) {
<                     storedSum = storedSum * 8 + b - '0';
<                 } else if (digits > 0) {
<                     digits = 6;
<                 }
Compress-35 is multi-line patch!

checking Compress/36
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/36/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
901a902,904
>         if (archive.files[currentEntryIndex].getSize() == 0) {
>             return new ByteArrayInputStream(new byte[0]);
>         }
Compress-36 is multi-line patch!

checking Compress/37
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
462c462,464
<                 if (ch == ' '){
---
>                 if (ch == '\n') { // blank line in header
>                     break;
>                 } else if (ch == ' '){ // End of length string
Compress-37 is multi-line patch!

checking Compress/38
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
859c859
<         if (getName().endsWith("/")) {
---
>         if (!isPaxHeader() && !isGlobalPaxHeader() && getName().endsWith("/")) {
Compress-38 is one-line patch!

checking Compress/39
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
30a31
>     private static final int MAX_SANITIZED_NAME_LENGTH = 255;
273c274,280
<         final char[] chars = s.toCharArray();
---
>         final char[] cs = s.toCharArray();
>         final char[] chars = cs.length <= MAX_SANITIZED_NAME_LENGTH ? cs : Arrays.copyOf(cs, MAX_SANITIZED_NAME_LENGTH);
>         if (cs.length > MAX_SANITIZED_NAME_LENGTH) {
>             for (int i = MAX_SANITIZED_NAME_LENGTH - 3; i < MAX_SANITIZED_NAME_LENGTH; i++) {
>                 chars[i] = '.';
>             }
>         }
Compress-39 is multi-line patch!

checking Compress/4
Compress-4 is multi-file patch!

checking Compress/40
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java src/main/java/org/apache/commons/compress/utils/BitInputStream.java
85c85
<         while (bitsCachedSize < count) {
---
>         while (bitsCachedSize < count && bitsCachedSize < 57) {
97a98,100
>         int overflowBits = 0;
>         long overflow = 0l;
>         if (bitsCachedSize < count) {
98a102,119
>             int bitsToAddCount = count - bitsCachedSize;
>             overflowBits = 8 - bitsToAddCount;
>             final long nextByte = in.read();
>             if (nextByte < 0) {
>                 return nextByte;
>             }
>             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
>                 long bitsToAdd = nextByte & MASKS[bitsToAddCount];
>                 bitsCached |= (bitsToAdd << bitsCachedSize);
>                 overflow = (nextByte >>> bitsToAddCount) & MASKS[overflowBits];
>             } else {
>                 bitsCached <<= bitsToAddCount;
>                 long bitsToAdd = (nextByte >>> (overflowBits)) & MASKS[bitsToAddCount];
>                 bitsCached |= bitsToAdd;
>                 overflow = nextByte & MASKS[overflowBits];
>             }
>             bitsCachedSize = count;
>         }
100a122
>         if (overflowBits == 0) {
107a130,134
>         } else {
>             bitsOut = bitsCached & MASKS[count];
>             bitsCached = overflow;
>             bitsCachedSize = overflowBits;
>         }
Compress-40 is multi-line patch!

checking Compress/41
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
246a247
>             return null;
249c250
<             return null;
---
>             throw new ZipException(String.format("Unexpected record signature: 0X%X", sig.getValue()));
Compress-41 is multi-line patch!

checking Compress/42
Compress-42 is multi-file patch!

checking Compress/43
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
1034c1034
<         metaData.put(ze, new EntryMetaData(localHeaderStart, usesDataDescriptor(ze.getMethod())));
---
>         metaData.put(ze, new EntryMetaData(localHeaderStart, usesDataDescriptor(ze.getMethod(), phased)));
1075c1075
<         final boolean dataDescriptor = usesDataDescriptor(zipMethod);
---
>         final boolean dataDescriptor = usesDataDescriptor(zipMethod, phased);
1171c1171
<         if (ze.getMethod() != DEFLATED || channel != null) {
---
>         if (!usesDataDescriptor(ze.getMethod(), false)) {
1492,1493c1492,1493
<     private boolean usesDataDescriptor(final int zipMethod) {
<         return zipMethod == DEFLATED && channel == null;
---
>     private boolean usesDataDescriptor(final int zipMethod, boolean phased) {
>         return !phased && zipMethod == DEFLATED && channel == null;
Compress-43 is multi-line patch!

checking Compress/44
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/44/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java
34a35,37
>         if ( checksum == null ){
>             throw new NullPointerException("Parameter checksum must not be null");
>         }
35a39,41
>         if ( in == null ){
>             throw new NullPointerException("Parameter in must not be null");
>         }
Compress-44 is multi-line patch!

checking Compress/45
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
486a487,488
>         } else {
>             formatBigIntegerBinary(value, buf, offset, length, negative);
488d489
<         formatBigIntegerBinary(value, buf, offset, length, negative);
Compress-45 is multi-line patch!

checking Compress/46
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/46/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java
529,530c529
<         final long TWO_TO_32 = 0x100000000L;
<         if (l >= TWO_TO_32) {
---
>         if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {
Compress-46 is multi-line patch!

checking Compress/47
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
415c415,416
<                 && supportsDataDescriptorFor(ze);
---
>                 && supportsDataDescriptorFor(ze)
>                 && supportsCompressedSizeFor(ze);
439a441,444
>         if (!supportsCompressedSizeFor(current.entry)) {
>             throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.UNKNOWN_COMPRESSED_SIZE,
>                     current.entry);
>         }
808a814,821
>     private boolean supportsCompressedSizeFor(final ZipArchiveEntry entry) {
>         return entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN
>             || entry.getMethod() == ZipEntry.DEFLATED
>             || entry.getMethod() == ZipMethod.ENHANCED_DEFLATED.getCode()
>             || (entry.getGeneralPurposeBit().usesDataDescriptor()
>                 && allowStoredEntriesWithDataDescriptor
>                 && entry.getMethod() == ZipEntry.STORED);
>     }
Compress-47 is multi-line patch!

checking Compress/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
239,240c239,244
<             if (read == 0 && inf.finished()) {
<                 return -1;
---
>             if (read == 0) {
>                 if (inf.finished()) {
>                     return -1;
>                 } else if (lengthOfLastRead == -1) {
>                     throw new IOException("Truncated ZIP file");
>                 }
Compress-5 is multi-line patch!

checking Compress/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/6/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
63a64
>         setName(name);
462,463c463,466
<         if (name == null) {
<             if (other.name != null) {
---
>         String myName = getName();
>         String otherName = other.getName();
>         if (myName == null) {
>             if (otherName != null) {
466c469
<         } else if (!name.equals(other.name)) {
---
>         } else if (!myName.equals(otherName)) {
Compress-6 is multi-line patch!

checking Compress/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/7/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
98c98,99
<             if (buffer[i] == 0) {
---
>             byte b = buffer[i];
>             if (b == 0) { // Trailing null
101c102
<             result.append((char) buffer[i]);
---
>             result.append((char) (b & 0xFF)); // Allow for sign-extension
Compress-7 is multi-line patch!

checking Compress/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/8/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
53d52
<         boolean stillPadding = true;
56a56,60
>         if (length < 2){
>             throw new IllegalArgumentException("Length "+length+" must be at least 2");
>         }
> 
>         boolean allNUL = true;
58,59c62,63
<             final byte currentByte = buffer[i];
<             if (currentByte == 0) {
---
>             if (buffer[i] != 0){
>                 allNUL = false;
61a66,69
>         }
>         if (allNUL) {
>             return 0L;
>         }
64,68c72,75
<             if (currentByte == (byte) ' ' || currentByte == '0') {
<                 if (stillPadding) {
<                    continue;
<             }
<                 if (currentByte == (byte) ' ') {
---
>         while (start < end){
>             if (buffer[start] == ' '){
>                 start++;
>             } else {
70d76
<                 }
71a78
>         }
73a81,88
>         byte trailer;
>         trailer = buffer[end-1];
>         if (trailer == 0 || trailer == ' '){
>             end--;
>         } else {
>             throw new IllegalArgumentException(
>                     exceptionMessage(buffer, offset, length, end-1, trailer));
>         }
74a90,93
>         trailer = buffer[end-1];
>         if (trailer == 0 || trailer == ' '){
>             end--;
>         }
76c95,96
<             stillPadding = false;
---
>         for ( ;start < end; start++) {
>             final byte currentByte = buffer[start];
Compress-8 is multi-line patch!

checking Compress/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Compress/9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
107a108,112
>     @Deprecated
>     @Override
>     public int getCount() {
>         return (int) getBytesWritten();
>     }
108a114,117
>     @Override
>     public long getBytesWritten() {
>         return ((CountingOutputStream) out).getBytesWritten();
>     }
330d338
<         count(numToWrite);
Compress-9 is multi-line patch!

checking Csv/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/1/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java
58c58
<         if (current == '\n') {
---
>         if (current == '\r' || (current == '\n' && lastChar != '\r')) {
Csv-1 is one-line patch!

checking Csv/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/10/src/main/java/org/apache/commons/csv/CSVPrinter.java src/main/java/org/apache/commons/csv/CSVPrinter.java
69a70,72
>         if (format.getHeader() != null) {
>             this.printRecord((Object[]) format.getHeader());
>         }
Csv-10 is multi-line patch!

checking Csv/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/11/src/main/java/org/apache/commons/csv/CSVParser.java src/main/java/org/apache/commons/csv/CSVParser.java
384c384
<                     final boolean emptyHeader = header.trim().isEmpty();
---
>                     final boolean emptyHeader = header == null || header.trim().isEmpty();
Csv-11 is one-line patch!

checking Csv/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/12/src/main/java/org/apache/commons/csv/CSVFormat.java src/main/java/org/apache/commons/csv/CSVFormat.java
219c219
<     public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);
---
>     public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);
Csv-12 is one-line patch!

checking Csv/13
Csv-13 is multi-file patch!

checking Csv/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/14/src/main/java/org/apache/commons/csv/CSVFormat.java src/main/java/org/apache/commons/csv/CSVFormat.java
1039c1039
<                 if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
---
>                 if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
Csv-14 is one-line patch!

checking Csv/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/15/src/main/java/org/apache/commons/csv/CSVFormat.java src/main/java/org/apache/commons/csv/CSVFormat.java
1189,1191c1189
<                 if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {
<                     quote = true;
<                 } else if (c <= COMMENT) {
---
>                 if (c <= COMMENT) {
Csv-15 is multi-line patch!

checking Csv/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/16/src/main/java/org/apache/commons/csv/CSVParser.java src/main/java/org/apache/commons/csv/CSVParser.java
288a289
>     private final CSVRecordIterator csvRecordIterator;
356a358
>         this.csvRecordIterator = new CSVRecordIterator();
523c525,528
<         return new Iterator<CSVRecord>() {
---
>         return csvRecordIterator;
>     }
>     
>     class CSVRecordIterator implements Iterator<CSVRecord> {
571d575
<     }
Csv-16 is multi-line patch!

checking Csv/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/2/src/main/java/org/apache/commons/csv/CSVRecord.java src/main/java/org/apache/commons/csv/CSVRecord.java
84a85
>         try {
85a87,92
>         } catch (ArrayIndexOutOfBoundsException e) {
>             throw new IllegalArgumentException(
>                     String.format(
>                             "Index for header '%s' is %d but CSVRecord only has %d values!",
>                             name, index.intValue(), values.length));
>         }
Csv-2 is multi-line patch!

checking Csv/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/3/src/main/java/org/apache/commons/csv/Lexer.java src/main/java/org/apache/commons/csv/Lexer.java
110a111
>             if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) {
111a113
>             }
112a115
>             return END_OF_STREAM;
Csv-3 is multi-line patch!

checking Csv/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/4/src/main/java/org/apache/commons/csv/CSVParser.java src/main/java/org/apache/commons/csv/CSVParser.java
288c288
<         return new LinkedHashMap<String, Integer>(this.headerMap);
---
>         return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);
Csv-4 is one-line patch!

checking Csv/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/5/src/main/java/org/apache/commons/csv/CSVPrinter.java src/main/java/org/apache/commons/csv/CSVPrinter.java
324a325
>         if (recordSeparator != null) {
325a327
>         }
Csv-5 is multi-line patch!

checking Csv/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/6/src/main/java/org/apache/commons/csv/CSVRecord.java src/main/java/org/apache/commons/csv/CSVRecord.java
181a182
>             if (col < values.length) {
182a184
>             }
Csv-6 is multi-line patch!

checking Csv/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/7/src/main/java/org/apache/commons/csv/CSVParser.java src/main/java/org/apache/commons/csv/CSVParser.java
31a32
> import java.util.Arrays;
370a372,374
>                     if (hdrMap.containsKey(header[i])) {
>                         throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header));
>                     }
Csv-7 is multi-line patch!

checking Csv/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/8/src/main/java/org/apache/commons/csv/CSVFormat.java src/main/java/org/apache/commons/csv/CSVFormat.java
315a316,321
>         	Set<String> dupCheck = new HashSet<String>();
>         	for(String hdr : header) {
>         		if (!dupCheck.add(hdr)) {
>         			throw new IllegalArgumentException("The header contains a duplicate entry: '" + hdr + "' in " + Arrays.toString(header));
>         		}
>         	}
665,671d670
<         if (header != null) {
<             final Set<String> set = new HashSet<String>(header.length);
<             set.addAll(Arrays.asList(header));
<             if (set.size() != header.length) {
<                 throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header));
<             }
<         }
Csv-8 is multi-line patch!

checking Csv/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Csv/9/src/main/java/org/apache/commons/csv/CSVRecord.java src/main/java/org/apache/commons/csv/CSVRecord.java
179a180,182
>         if (mapping == null) {
>             return map;
>         }
Csv-9 is multi-line patch!

checking Gson/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/1/gson/src/main/java/com/google/gson/TypeInfoFactory.java gson/src/main/java/com/google/gson/TypeInfoFactory.java
92a93,94
>       } else if (typeToEvaluate instanceof TypeVariable<?>) {
>         Type theSearchedType = null;
94c96,102
< 
---
>         do {
>           theSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate);
>         } while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>));
> 
>         if (theSearchedType != null) {
>           return theSearchedType;
>         }
108a117,126
>   private static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) {
>     Class<?> rawParentType = null;
>     if (parentType instanceof Class<?>) {
>       rawParentType = (Class<?>) parentType;
>     } else if (parentType instanceof ParameterizedType) {
>       ParameterizedType parentTypeAsPT = (ParameterizedType) parentType;
>       rawParentType = (Class<?>) parentTypeAsPT.getRawType();
>     } else {
>       return null;
>     }
109a128,130
>     Type superClass = rawParentType.getGenericSuperclass();
>     if (superClass instanceof ParameterizedType
>         && ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {
110a132,143
>       TypeVariable<?>[] classTypeVariables =
>           ((Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters();
>       int indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate);
> 
>       Type[] actualTypeArguments = null;
>       if (parentType instanceof Class<?>) {
>         actualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments();
>       } else if (parentType instanceof ParameterizedType) {
>         actualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();
>       } else {
>         return null;
>       }
111a145,146
>       return actualTypeArguments[indexOfActualTypeArgument];
>     }
112a148,153
>     Type searchedType = null;
>     if (superClass != null) {
>       searchedType = extractTypeForHierarchy(superClass, typeToEvaluate);
>     }
>     return searchedType;
>   }
Gson-1 is multi-line patch!

checking Gson/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
122,123c122,123
<         TypeAdapter t =
<           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
---
>         TypeAdapter t = jsonAdapterPresent ? typeAdapter
>             : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
Gson-10 is multi-line patch!

checking Gson/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/11/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
370a371
>       case STRING:
Gson-11 is one-line patch!

checking Gson/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/12/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
261a262
>       if (stackSize > 0) {
262a264
>       }
263a266
>     if (stackSize > 0) {
264a268
>     }
Gson-12 is multi-line patch!

checking Gson/13
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/13/gson/src/main/java/com/google/gson/stream/JsonReader.java gson/src/main/java/com/google/gson/stream/JsonReader.java
731c731
<     if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {
---
>     if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {
Gson-13 is one-line patch!

checking Gson/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/14/gson/src/main/java/com/google/gson/internal/$Gson$Types.java gson/src/main/java/com/google/gson/internal/$Gson$Types.java
78a79,81
>     if (bound instanceof WildcardType) {
>       upperBounds = ((WildcardType) bound).getUpperBounds();
>     } else {
79a83
>     }
89a94,96
>     if (bound instanceof WildcardType) {
>       lowerBounds = ((WildcardType) bound).getLowerBounds();
>     } else {
90a98
>     }
Gson-14 is multi-line patch!

checking Gson/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/15/gson/src/main/java/com/google/gson/stream/JsonWriter.java gson/src/main/java/com/google/gson/stream/JsonWriter.java
495c495
<     if (Double.isNaN(value) || Double.isInfinite(value)) {
---
>     if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {
Gson-15 is one-line patch!

checking Gson/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/16/gson/src/main/java/com/google/gson/internal/$Gson$Types.java gson/src/main/java/com/google/gson/internal/$Gson$Types.java
341a342
>         if (visitedTypeVariables.contains(typeVariable)) {
342a344,347
>           return toResolve;
>         } else {
>           visitedTypeVariables.add(typeVariable);
>         }
Gson-16 is multi-line patch!

checking Gson/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/17/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
99,100c99,101
<     if (in.peek() != JsonToken.STRING) {
<       throw new JsonParseException("The date should be a string value");
---
>     if (in.peek() == JsonToken.NULL) {
>       in.nextNull();
>       return null;
Gson-17 is multi-line patch!

checking Gson/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/18/gson/src/main/java/com/google/gson/internal/$Gson$Types.java gson/src/main/java/com/google/gson/internal/$Gson$Types.java
277a278
>     if (context instanceof WildcardType) {
278a280,281
>       context = ((WildcardType)context).getUpperBounds()[0];
>     }
Gson-18 is multi-line patch!

checking Gson/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
833c833,836
<         return (TypeAdapter<T2>) typeAdapter;
---
>         return (TypeAdapter<T2>) new TypeAdapter<T1>() {
>           @Override public void write(JsonWriter out, T1 value) throws IOException {
>             typeAdapter.write(out, value);
>           }
834a838,846
>           @Override public T1 read(JsonReader in) throws IOException {
>             T1 result = typeAdapter.read(in);
>             if (result != null && !requestedType.isInstance(result)) {
>               throw new JsonSyntaxException("Expected a " + requestedType.getName()
>                   + " but was " + result.getClass().getName());
>             }
>             return result;
>           }
>         };
Gson-2 is multi-line patch!

checking Gson/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
35a36,39
> import java.util.concurrent.ConcurrentHashMap;
> import java.util.concurrent.ConcurrentMap;
> import java.util.concurrent.ConcurrentNavigableMap;
> import java.util.concurrent.ConcurrentSkipListMap;
175c179,191
<       if (SortedMap.class.isAssignableFrom(rawType)) {
---
>       if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {
>         return new ObjectConstructor<T>() {
>           @Override public T construct() {
>             return (T) new ConcurrentSkipListMap<Object, Object>();
>           }
>         };
>       } else if (ConcurrentMap.class.isAssignableFrom(rawType)) {
>         return new ObjectConstructor<T>() {
>           @Override public T construct() {
>             return (T) new ConcurrentHashMap<Object, Object>();
>           }
>         };
>       } else if (SortedMap.class.isAssignableFrom(rawType)) {
Gson-3 is multi-line patch!

checking Gson/4
Gson-4 is multi-file patch!

checking Gson/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java
213a214
>                 timezoneOffset = timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + "00";
Gson-5 is one-line patch!

checking Gson/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java
66a67
>     if (typeAdapter != null) {
67a69
>     }
Gson-6 is multi-line patch!

checking Gson/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/7/gson/src/main/java/com/google/gson/stream/JsonReader.java gson/src/main/java/com/google/gson/stream/JsonReader.java
954c954,957
<     } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
---
>     } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {
>       if (p == PEEKED_UNQUOTED) {
>         peekedString = nextUnquotedValue();
>       } else {
955a959
>       }
1182c1186,1189
<     } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
---
>     } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {
>       if (p == PEEKED_UNQUOTED) {
>         peekedString = nextUnquotedValue();
>       } else {
1183a1191
>       }
Gson-7 is multi-line patch!

checking Gson/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Gson/8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java
22a23
> import java.lang.reflect.Modifier;
47a49
>           assertInstantiable(c);
70a73
>           assertInstantiable(c);
89a93
>           assertInstantiable(c);
109a114,122
>   private static void assertInstantiable(Class<?> c) {
>     int modifiers = c.getModifiers();
>     if (Modifier.isInterface(modifiers)) {
>       throw new UnsupportedOperationException("Interface can't be instantiated! Interface name: " + c.getName());
>     }
>     if (Modifier.isAbstract(modifiers)) {
>       throw new UnsupportedOperationException("Abstract class can't be instantiated! Class name: " + c.getName());
>     }
>   }
Gson-8 is multi-line patch!

checking Gson/9
Gson-9 is multi-file patch!

checking JacksonCore/1
JacksonCore-1 is multi-file patch!

checking JacksonCore/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java
925c925,926
<         if (_spilloverEnd >= hashArea.length) {
---
>         final int end = (_hashSize << 3);
>         if (_spilloverEnd >= end) {
984c985,986
<         hash ^= (hash >>> 12);
---
>         hash ^= (hash << 3); // shuffle back a bit
>         hash += (hash >>> 12); // and bit more
JacksonCore-10 is multi-line patch!

checking JacksonCore/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/11/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java
881a882
>             _verifyNeedForRehash();
JacksonCore-11 is one-line patch!

checking JacksonCore/12
JacksonCore-12 is multi-file patch!

checking JacksonCore/13
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/13/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java
126a127,134
>     @Override
>     public JsonGenerator disable(Feature f) {
>         super.disable(f);
>         if (f == Feature.QUOTE_FIELD_NAMES) {
>             _cfgUnqNames = true;
>         }
>         return this;
>     }
JacksonCore-13 is multi-line patch!

checking JacksonCore/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/14/src/main/java/com/fasterxml/jackson/core/io/IOContext.java src/main/java/com/fasterxml/jackson/core/io/IOContext.java
274c274
<         if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }
---
>         if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }
279c279
<         if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }
---
>         if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }
284c284
< return new IllegalArgumentException("Trying to release buffer not owned by the context"); 
---
>         return new IllegalArgumentException("Trying to release buffer smaller than original");
JacksonCore-14 is multi-line patch!

checking JacksonCore/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/15/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
226a227
>     	if(!_allowMultipleMatches && _currToken != null && _exposedContext == null){
227a229,231
>     		if((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){
>     			return (_currToken = null);
>     		}
229a234,238
>     		else if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath 
>     				&& _itemFilter == TokenFilter.INCLUDE_ALL) {
>     			return (_currToken = null);
>     		}
>     	}
JacksonCore-15 is multi-line patch!

checking JacksonCore/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java
34a35
>     protected boolean _suppressNextToken;
44a46
>         _suppressNextToken = delegate.hasCurrentToken();
104c106
<     public JsonToken nextToken() throws IOException, JsonParseException
---
>     public JsonToken nextToken() throws IOException
105a108,114
>         if (delegate == null) {
>             return null;
>         }
>         if (_suppressNextToken) {
>             _suppressNextToken = false;
>             return delegate.currentToken();
>         }
107,110c116,118
<         if (t != null) return t;
<         while (switchToNext()) {
<             t = delegate.nextToken();
<             if (t != null) return t;
---
>         while ((t == null) && switchToNext()) {
>             t = delegate.hasCurrentToken()
>                     ? delegate.currentToken() : delegate.nextToken();
112c120
<         return null;
---
>         return t;
JacksonCore-16 is multi-line patch!

checking JacksonCore/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java
527a528,532
>         if (len <= buf.length) {
>             text.getChars(offset, offset+len, buf, 0);
>             _writeRawSegment(buf, 0, len);
>             return;
>         }
531a537,538
>         final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4); // == (1/4 + 1/16) == 5/16
>         final int maxBytes = maxChunk * 3;
534c541
<             int len2 = Math.min(buf.length, len);
---
>             int len2 = Math.min(maxChunk, len);
536c543,545
<             writeRaw(buf, 0, len2);
---
>             if ((_outputTail + maxBytes) > _outputEnd) {
>                 _flushBuffer();
>             }
538a548,554
>             if (len > 0) {
>                 char ch = buf[len2-1];
>                 if ((ch >= SURR1_FIRST) && (ch <= SURR1_LAST)) {
>                     --len2;
>                 }
>             }
>             _writeRawSegment(buf, 0, len2);
671a688,711
>     private void _writeRawSegment(char[] cbuf, int offset, int end) throws IOException
>     {
>         main_loop:
>         while (offset < end) {
>             inner_loop:
>             while (true) {
>                 int ch = (int) cbuf[offset];
>                 if (ch > 0x7F) {
>                     break inner_loop;
>                 }
>                 _outputBuffer[_outputTail++] = (byte) ch;
>                 if (++offset >= end) {
>                     break main_loop;
>                 }
>             }
>             char ch = cbuf[offset++];
>             if (ch < 0x800) { // 2-byte?
>                 _outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6));
>                 _outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
>             } else {
>                 offset = _outputRawMultiByteChar(ch, cbuf, offset, end);
>             }
>         }
>     }
1887c1927,1928
<                     _reportError("Split surrogate on writeRaw() input (last character)");
---
>                     _reportError(String.format(
> "Split surrogate on writeRaw() input (last character): first character 0x%4x", ch));
JacksonCore-17 is multi-line patch!

checking JacksonCore/18
JacksonCore-18 is multi-file patch!

checking JacksonCore/19
JacksonCore-19 is multi-file patch!

checking JacksonCore/2
JacksonCore-2 is multi-file patch!

checking JacksonCore/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/20/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java src/main/java/com/fasterxml/jackson/core/JsonGenerator.java
1330c1330,1339
<         throw new JsonGenerationException("No native support for writing embedded objects",
---
>         if (object == null) {
>             writeNull();
>             return;
>         }
>         if (object instanceof byte[]) {
>             writeBinary((byte[]) object);
>             return;
>         }
>         throw new JsonGenerationException("No native support for writing embedded objects of type "
>                 +object.getClass().getName(),
JacksonCore-20 is multi-line patch!

checking JacksonCore/21
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/21/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
237a238
>             if (!_includePath) {
247a249
>                 }
JacksonCore-21 is multi-line patch!

checking JacksonCore/22
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java
417c417
<                     if (_includePath) {
---
>                     if (_verifyAllowedMatches() && _includePath) {
439a440
>                     if (_verifyAllowedMatches()) {
440a442
>                     }
575c577
<                         if (_includePath) {
---
>                         if (_verifyAllowedMatches() && _includePath) {
599a602
>                         if (_verifyAllowedMatches()) {
600a604
>                         }
717c721
<                     if (f == TokenFilter.INCLUDE_ALL) {
---
>                     if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {
731a736
>                         if (_verifyAllowedMatches()) {
732a738
>                         }
770a777,783
>     private final boolean _verifyAllowedMatches() throws IOException {
>         if (_matchCount == 0 || _allowMultipleMatches) {
>             ++_matchCount;
>             return true;
>         }
>         return false;
>     }
JacksonCore-22 is multi-line patch!

checking JacksonCore/23
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/23/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java
254a255,258
>         if (getClass() != DefaultPrettyPrinter.class) { // since 2.10
>             throw new IllegalStateException("Failed `createInstance()`: "+getClass().getName()
>                     +" does not override method; it has to");
>         }
JacksonCore-23 is multi-line patch!

checking JacksonCore/24
JacksonCore-24 is multi-file patch!

checking JacksonCore/25
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/25/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java
1963c1963
<             if (i <= maxCode) {
---
>             if (i < maxCode) {
JacksonCore-25 is one-line patch!

checking JacksonCore/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java
107a108
>         _currBufferStart = start;
JacksonCore-26 is one-line patch!

checking JacksonCore/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/3/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java
124a125
>         _currInputRowStart = start;
125a127
>         _currInputProcessed = -start;
JacksonCore-3 is multi-line patch!

checking JacksonCore/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/4/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
584a585
>         int newLen = len + (len >> 1);
586c587,589
<         int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
---
>         if (newLen > MAX_SEGMENT_LEN) {
>             newLen = len + (len >> 2);
>         }
JacksonCore-4 is multi-line patch!

checking JacksonCore/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/5/src/main/java/com/fasterxml/jackson/core/JsonPointer.java src/main/java/com/fasterxml/jackson/core/JsonPointer.java
193c193
<             char c = str.charAt(i++);
---
>             char c = str.charAt(i);
JacksonCore-5 is one-line patch!

checking JacksonCore/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java src/main/java/com/fasterxml/jackson/core/JsonPointer.java
193,194c193,201
<         for (int i = 0; i < len; ++i) {
<             char c = str.charAt(i);
---
>         char c = str.charAt(0);
>         if (c <= '0') {
>             return (len == 1 && c == '0') ? 0 : -1;
>         }
>         if (c > '9') {
>             return -1;
>         }
>         for (int i = 1; i < len; ++i) {
>             c = str.charAt(i);
JacksonCore-6 is multi-line patch!

checking JacksonCore/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/7/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java
168a169,171
>             if (!_gotName) {
>                 return STATUS_EXPECT_NAME;
>             }
JacksonCore-7 is multi-line patch!

checking JacksonCore/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonCore/8/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java
307c307
<         if (!_hasSegments)  return _currentSegment;
---
>         if (!_hasSegments && _currentSegment != null)  return _currentSegment;
JacksonCore-8 is one-line patch!

checking JacksonCore/9
JacksonCore-9 is multi-file patch!

checking JacksonDatabind/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/1/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
591a592
>             return;
JacksonDatabind-1 is one-line patch!

checking JacksonDatabind/10
JacksonDatabind-10 is multi-file patch!

checking JacksonDatabind/100
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/100/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
363,371c363,364
<             byte[] data = n.binaryValue();
<             if (data != null) {
<                 return data;
<             }
<             if (n.isPojo()) {
<                 Object ob = ((POJONode) n).getPojo();
<                 if (ob instanceof byte[]) {
<                     return (byte[]) ob;
<                 }
---
>             if (n instanceof TextNode) {
>                 return ((TextNode) n).getBinaryValue(b64variant);
372a366
>             return n.binaryValue();
JacksonDatabind-100 is multi-line patch!

checking JacksonDatabind/101
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/101/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
771d770
<                         p.nextToken();
776a776,780
>                     if (t != JsonToken.END_OBJECT) {
>                         ctxt.reportWrongTokenException(this, JsonToken.END_OBJECT, 
>                                 "Attempted to unwrap '%s' value",
>                                 handledType().getName());
>                     }
JacksonDatabind-101 is multi-line patch!

checking JacksonDatabind/102
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/102/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
67,69d66
<         if (property == null) {
<             return this;
<         }
JacksonDatabind-102 is multi-line patch!

checking JacksonDatabind/103
JacksonDatabind-103 is multi-file patch!

checking JacksonDatabind/104
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
440a441,444
>         if (cal.get(Calendar.ERA) == GregorianCalendar.BC) {
>             _formatBCEYear(buffer, year);
>         } else {
>             if (year > 9999) {
445a450,451
>                 buffer.append('+');
>             }
446a453
>         }
482a490
>     protected void _formatBCEYear(StringBuffer buffer, int bceYearNoSign) {
484a493,498
>         if (bceYearNoSign == 1) {
>             buffer.append("+0000");
>             return;
>         }
>         final int isoYear = bceYearNoSign - 1;
>         buffer.append('-');
487a502,503
>         pad4(buffer, isoYear);
>     }
515a532,534
>             if (h > 99) { // [databind#2167]: handle above 9999 correctly
>                 buffer.append(h);
>             } else {
516a536
>             }
JacksonDatabind-104 is multi-line patch!

checking JacksonDatabind/105
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/105/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java
22c22,23
<                 ByteBuffer.class
---
>                 ByteBuffer.class,
>                 Void.class
46a48,50
>             }
>             if (rawType == Void.class) {
>                 return NullifyingDeserializer.instance;
JacksonDatabind-105 is multi-line patch!

checking JacksonDatabind/106
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/106/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java
307a308,310
>         if (!node.canConvertToInt()) {
>             reportOverflowInt();
>         }
313a317,319
>         if (!node.canConvertToInt()) {
>             reportOverflowLong();
>         }
JacksonDatabind-106 is multi-line patch!

checking JacksonDatabind/107
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/107/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
165c165
<                         return null;
---
>                         return NullifyingDeserializer.instance;
JacksonDatabind-107 is one-line patch!

checking JacksonDatabind/108
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/108/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
1169c1169
<         return (T) _bindAsTree(p);
---
>         return (T) _bindAsTreeOrNull(p);
1706a1707,1736
>     protected final JsonNode _bindAsTreeOrNull(JsonParser p) throws IOException
>     {
>         _config.initialize(p);
>         if (_schema != null) {
>             p.setSchema(_schema);
>         }
>         JsonToken t = p.getCurrentToken();
>         if (t == null) {
>             t = p.nextToken();
>             if (t == null) {
>                 return null;
>             }
>         }
>         final JsonNode resultNode;
>         if (t == JsonToken.VALUE_NULL) {
>             resultNode = _config.getNodeFactory().nullNode();
>         } else {
>             final DeserializationContext ctxt = createDeserializationContext(p);
>             final JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt);
>             if (_unwrapRoot) {
>                 resultNode = (JsonNode) _unwrapAndDeserialize(p, ctxt, JSON_NODE_TYPE, deser);
>             } else {
>                 resultNode = (JsonNode) deser.deserialize(p, ctxt);
>                 if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {
>                     _verifyNoTrailingTokens(p, ctxt, JSON_NODE_TYPE);
>                 }
>             }
>         }
>         return resultNode;
>     }
JacksonDatabind-108 is multi-line patch!

checking JacksonDatabind/109
JacksonDatabind-109 is multi-file patch!

checking JacksonDatabind/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/11/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
895c895
<             return _unknownType();
---
>             context = new TypeBindings(this, (Class<?>) null);
902c902
<             JavaType actualType = context.findType(name);
---
>             JavaType actualType = context.findType(name, false);
JacksonDatabind-11 is multi-line patch!

checking JacksonDatabind/110
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/110/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java
46a47
>     private final static Class<?> CLASS_UNMODIFIABLE_LIST_ALIAS;
57a59
>         CLASS_UNMODIFIABLE_LIST_ALIAS = Collections.unmodifiableList(new LinkedList<Object>()).getClass();
78c80
<         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {
---
>         } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST) || type.hasRawClass(CLASS_UNMODIFIABLE_LIST_ALIAS)) {
JacksonDatabind-110 is multi-line patch!

checking JacksonDatabind/111
JacksonDatabind-111 is multi-file patch!

checking JacksonDatabind/112
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/112/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java
107c107
<             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
---
>             AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();
108a109,111
>                 JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
>                 delegate = findDeserializer(ctxt, delegateType, property);
>             } else if ((delegateCreator = _valueInstantiator.getDelegateCreator()) != null) {
JacksonDatabind-112 is multi-line patch!

checking JacksonDatabind/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/12/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java
303c303,305
<         return (_valueTypeDeserializer == null)
---
>         return (_valueDeserializer == null)
>                 && (_keyDeserializer == null)
>                 && (_valueTypeDeserializer == null)
JacksonDatabind-12 is multi-line patch!

checking JacksonDatabind/13
JacksonDatabind-13 is multi-file patch!

checking JacksonDatabind/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/14/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
1476c1476
<             JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, JSON_NODE_TYPE);
---
>             JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt);
1576a1577,1581
>     protected JsonDeserializer<Object> _findTreeDeserializer(DeserializationContext ctxt)
>         throws JsonMappingException
>     {
>         JsonDeserializer<Object> deser = _rootDeserializers.get(JSON_NODE_TYPE);
>         if (deser == null) {
1577a1583,1590
>             deser = ctxt.findRootValueDeserializer(JSON_NODE_TYPE);
>             if (deser == null) { // can this happen?
>                 throw new JsonMappingException("Can not find a deserializer for type "+JSON_NODE_TYPE);
>             }
>             _rootDeserializers.put(JSON_NODE_TYPE, deser);
>         }
>         return deser;
>     }
JacksonDatabind-14 is multi-line patch!

checking JacksonDatabind/15
JacksonDatabind-15 is multi-file patch!

checking JacksonDatabind/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/16/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java
112c112
<         return (previous != null) && previous.equals(ann);
---
>         return (previous == null) || !previous.equals(ann);
JacksonDatabind-16 is one-line patch!

checking JacksonDatabind/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/17/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java
180c180
<                         || TreeNode.class.isAssignableFrom(t.getRawClass()));
---
>                                 && !TreeNode.class.isAssignableFrom(t.getRawClass()));
JacksonDatabind-17 is one-line patch!

checking JacksonDatabind/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java src/main/java/com/fasterxml/jackson/databind/MappingIterator.java
27a28
>     protected final static int STATE_CLOSED = 0;
31a33
>     protected final static int STATE_NEED_RESYNC = 1;
36a39
>     protected final static int STATE_MAY_HAVE_VALUE = 2;
41a45
>     protected final static int STATE_HAS_VALUE = 3;
69c73
<     protected JsonParser _parser;
---
>     protected final JsonParser _parser;
74a79
>     protected final JsonStreamContext _seqContext;
98c103
<     protected boolean _hasNextChecked;
---
>     protected int _state;
138c143,148
<         if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {
---
>         if (p == null) { // can this occur?
>             _seqContext = null;
>             _state = STATE_CLOSED;
>         } else {
>             JsonStreamContext sctxt = p.getParsingContext();
>             if (managedParser && p.isExpectedStartArrayToken()) {
140a151
>             } else {
143a155,161
>                 JsonToken t = p.getCurrentToken();
>                 if ((t == JsonToken.START_OBJECT) || (t == JsonToken.START_ARRAY)) {
>                     sctxt = sctxt.getParent();
>                 }
>             }
>             _seqContext = sctxt;
>             _state = STATE_MAY_HAVE_VALUE;
188a207,208
>         if (_state != STATE_CLOSED) {
>             _state = STATE_CLOSED;
191a212
>         }
210c231,232
<         if (_parser == null) {
---
>         switch (_state) {
>         case STATE_CLOSED:
211a234,235
>         case STATE_NEED_RESYNC:
>             _resync();
213,214c237
<         }
<         if (!_hasNextChecked) {
---
>         case STATE_MAY_HAVE_VALUE:
216d238
<             _hasNextChecked = true;
221,224c243,245
<                     JsonParser jp = _parser;
<                     _parser = null;
<                     if (_closeParser) {
<                         jp.close();
---
>                     _state = STATE_CLOSED;
>                     if (_closeParser && (_parser != null)) {
>                         _parser.close();
228a250,252
>             _state = STATE_HAS_VALUE;
>             return true;
>         case STATE_HAS_VALUE:
236c260,264
<         if (!_hasNextChecked) {
---
>         switch (_state) {
>         case STATE_CLOSED:
>             return _throwNoSuchElement();
>         case STATE_NEED_RESYNC: // fall-through, will do re-sync
>         case STATE_MAY_HAVE_VALUE:
239a268,270
>             break;
>         case STATE_HAS_VALUE:
>             break;
241,244d271
<         if (_parser == null) {
<             return _throwNoSuchElement();
<         }
<         _hasNextChecked = false;
245a273
>         int nextState = STATE_NEED_RESYNC;
253a282
>             nextState = STATE_MAY_HAVE_VALUE;
255a285
>             _state = nextState;
351a382,384
>     protected void _resync() throws IOException
>     {
>         final JsonParser p = _parser;
352a386,388
>         if (p.getParsingContext() == _seqContext) {
>             return;
>         }
353a390,403
>         while (true) {
>             JsonToken t = p.nextToken();
>             if ((t == JsonToken.END_ARRAY) || (t == JsonToken.END_OBJECT)) {
>                 if (p.getParsingContext() == _seqContext) {
>                     p.clearCurrentToken();
>                     return;
>                 }
>             } else if ((t == JsonToken.START_ARRAY) || (t == JsonToken.START_OBJECT)) {
>                 p.skipChildren();
>             } else if (t == null) {
>                 return;
>             }
>         }
>     }
JacksonDatabind-18 is multi-line patch!

checking JacksonDatabind/19
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/19/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
1020a1021,1023
>         if (rawClass == Properties.class) {
>             return MapType.construct(rawClass, CORE_TYPE_STRING, CORE_TYPE_STRING);
>         }
JacksonDatabind-19 is multi-line patch!

checking JacksonDatabind/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/2/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
782a783,788
>         if (value == null) {
>             writeNull();
>             return;
>         }
>         Class<?> raw = value.getClass();
>         if (raw == byte[].class) {
783a790,791
>             return;
>         } else if (_objectCodec == null) {
787a796,799
>             _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);
>         } else {
>             _objectCodec.writeValue(this, value);
>         }
792a805,808
>         if (node == null) {
>             writeNull();
>             return;
>         }
793a810
>         if (_objectCodec == null) {
795a813,815
>         } else {
>             _objectCodec.writeTree(this, node);
>         }
JacksonDatabind-2 is multi-line patch!

checking JacksonDatabind/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/20/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java
3a4
> import com.fasterxml.jackson.annotation.JsonIgnore;
323a325
>     @JsonIgnore // work-around for [databind#815]
JacksonDatabind-20 is multi-line patch!

checking JacksonDatabind/21
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/21/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
3a4
> import java.lang.reflect.Field;
63a65,67
>     @Override
>     public String findEnumValue(Enum<?> value)
>     {
66a71
>         try {
67a73,81
>             Field f = value.getClass().getField(value.name());
>             if (f != null) {
>                 JsonProperty prop = f.getAnnotation(JsonProperty.class);
>                 String n = prop.value();
>                 if (n != null && !n.isEmpty()) {
>                     return n;
>                 }
>             }
>         } catch (Exception e) {
68a83,85
>         }
>         return value.name();
>     }
JacksonDatabind-21 is multi-line patch!

checking JacksonDatabind/22
JacksonDatabind-22 is multi-file patch!

checking JacksonDatabind/23
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java
53a54
>         protected final static Integer EMPTY_INTEGER = Integer.valueOf(0);
119a121
>         private final static Short EMPTY = (short) 0;
123a126,129
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Short value) {
>             return EMPTY.equals(value);
>         }
158a165,168
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Object value) {
>             return EMPTY_INTEGER.equals(value);
>         }
174a185,188
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Number value) {
>             return value.intValue() == 0;
>         }
184a199
>         private final static Long EMPTY = 0L;
189a205,208
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Object value) {
>             return EMPTY.equals(value);
>         }
199a219
>         private final static Float EMPTY = 0f;
204a225,228
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Object value) {
>             return EMPTY.equals(value);
>         }
221a246
>         private final static Double EMPTY = 0d;
226a252,255
>         @Override
>         public boolean isEmpty(SerializerProvider prov, Object value) {
>             return EMPTY.equals(value);
>         }
JacksonDatabind-23 is multi-line patch!

checking JacksonDatabind/24
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/24/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java
234d233
<         TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();
237c236
<                 tz, _defaultBase64);
---
>                 _timeZone, _defaultBase64);
JacksonDatabind-24 is multi-line patch!

checking JacksonDatabind/25
JacksonDatabind-25 is multi-file patch!

checking JacksonDatabind/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/26/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java
39c39,40
<     implements BeanProperty
---
>     implements BeanProperty,
>         java.io.Serializable // since 2.6.2
41a43
>     private static final long serialVersionUID = 4603296144163950020L;
JacksonDatabind-26 is multi-line patch!

checking JacksonDatabind/27
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/27/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
794c794
<                 if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
---
>                 if (ext.handlePropertyValue(p, ctxt, propName, null)) {
JacksonDatabind-27 is one-line patch!

checking JacksonDatabind/28
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/28/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java
97,98c97
<             if (p.getCurrentToken() == JsonToken.START_OBJECT) {
<                 p.nextToken();
---
>             if (p.isExpectedStartObjectToken() || p.hasToken(JsonToken.FIELD_NAME)) {
103,104c102,103
<             if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
<                 return deserializeObject(p, ctxt, ctxt.getNodeFactory());
---
>             if (p.hasToken(JsonToken.END_OBJECT)) {
>                 return ctxt.getNodeFactory().objectNode();
JacksonDatabind-28 is multi-line patch!

checking JacksonDatabind/29
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/29/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
227a228,230
>         if (t == JsonToken.VALUE_NULL) {
>             return null;
>         }
250a254,257
>         if (t == JsonToken.VALUE_NULL) {
>             _properties[index].getProperty().set(bean, null);
>             return;
>         }
JacksonDatabind-29 is multi-line patch!

checking JacksonDatabind/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/3/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
66c66
<                 value = _elementDeserializer.getNullValue();
---
>                 value = null; // since we have established that '_elementDeserializer == null' earlier
95c95
<             String value = (t == JsonToken.VALUE_NULL) ? null : deser.deserialize(jp, ctxt);
---
>             String value = (t == JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);
JacksonDatabind-3 is multi-line patch!

checking JacksonDatabind/30
JacksonDatabind-30 is multi-file patch!

checking JacksonDatabind/31
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
672c672
<             _append(JsonToken.VALUE_STRING, text);
---
>             _appendValue(JsonToken.VALUE_STRING, text);
686c686
<             _append(JsonToken.VALUE_STRING, text);
---
>             _appendValue(JsonToken.VALUE_STRING, text);
731c731
<         _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));
---
>         _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));
739c739
<         _append(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));
---
>         _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(text));
744c744
<         _append(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));
---
>         _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new String(text, offset, len));
755c755
<         _append(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));
---
>         _appendValue(JsonToken.VALUE_NUMBER_INT, Short.valueOf(i));
760c760
<         _append(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));
---
>         _appendValue(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));
765c765
<         _append(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));
---
>         _appendValue(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));
770c770
<         _append(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));
---
>         _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));
775c775
<         _append(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));
---
>         _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));
783c783
<             _append(JsonToken.VALUE_NUMBER_FLOAT, dec);
---
>             _appendValue(JsonToken.VALUE_NUMBER_FLOAT, dec);
792c792
<             _append(JsonToken.VALUE_NUMBER_INT, v);
---
>             _appendValue(JsonToken.VALUE_NUMBER_INT, v);
801c801
<         _append(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);
---
>         _appendValue(JsonToken.VALUE_NUMBER_FLOAT, encodedValue);
806c806
<         _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);
---
>         _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE);
811c811
<         _append(JsonToken.VALUE_NULL);
---
>         _appendValue(JsonToken.VALUE_NULL);
829c829
<             _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);
---
>             _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);
837c837
<             _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);
---
>             _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value);
853c853
<             _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);
---
>             _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, node);
1090a1091,1103
>     protected final void _appendValue(JsonToken type)
>     {
>         _writeContext.writeValue();
>         Segment next = _hasNativeId
>                 ? _last.append(_appendAt, type, _objectId, _typeId)
>                 : _last.append(_appendAt, type);
>         if (next == null) {
>             ++_appendAt;
>         } else {
>             _last = next;
>             _appendAt = 1; // since we added first at 0
>         }
>     }
1097a1111,1123
>     protected final void _appendValue(JsonToken type, Object value)
>     {
>         _writeContext.writeValue();
>         Segment next = _hasNativeId
>                 ? _last.append(_appendAt, type, value, _objectId, _typeId)
>                 : _last.append(_appendAt, type, value);
>         if (next == null) {
>             ++_appendAt;
>         } else {
>             _last = next;
>             _appendAt = 1;
>         }
>     }
JacksonDatabind-31 is multi-line patch!

checking JacksonDatabind/32
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java
220a221
>         case JsonTokenId.ID_END_OBJECT:
534a536
>             case JsonTokenId.ID_END_OBJECT:
536a539
>                 return new LinkedHashMap<String,Object>(2);
JacksonDatabind-32 is multi-line patch!

checking JacksonDatabind/33
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/33/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
748c748,751
<                     || _hasAnnotation(a, JsonRawValue.class)) {
---
>                     || _hasAnnotation(a, JsonRawValue.class)
>                     || _hasAnnotation(a, JsonUnwrapped.class)
>                     || _hasAnnotation(a, JsonBackReference.class)
>                     || _hasAnnotation(a, JsonManagedReference.class)) {
JacksonDatabind-33 is multi-line patch!

checking JacksonDatabind/34
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/34/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java
81c81
<                 visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);
---
>                 visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);
JacksonDatabind-34 is one-line patch!

checking JacksonDatabind/35
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/35/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java
89,92c89,90
<         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
<             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
<                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
<         }
---
>         JsonToken t = p.getCurrentToken();
>         if (t == JsonToken.START_OBJECT) {
97a96,99
>         } else if (t != JsonToken.FIELD_NAME) {
>             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
>                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
>         }
JacksonDatabind-35 is multi-line patch!

checking JacksonDatabind/36
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/36/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
249a250,254
>     @Override // since 2.7
>     public void setLenient(boolean enabled) {
>         Boolean newValue = enabled;
>         if (_lenient != newValue) {
>             _lenient = newValue;
250a256,258
>             _clearFormats();
>         }
>     }
555a564,566
>         }
>         if (lenient != null) {
>             df.setLenient(lenient.booleanValue());
JacksonDatabind-36 is multi-line patch!

checking JacksonDatabind/37
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/37/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
135c135
<         return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
---
>         return new SimpleType(subclass, _bindings, this, _superInterfaces,
JacksonDatabind-37 is one-line patch!

checking JacksonDatabind/38
JacksonDatabind-38 is multi-file patch!

checking JacksonDatabind/39
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/39/src/main/java/com/fasterxml/jackson/databind/deser/std/NullifyingDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/NullifyingDeserializer.java
34a35,43
>         if (p.hasToken(JsonToken.FIELD_NAME)) {
>             while (true) {
>                 JsonToken t = p.nextToken();
>                 if ((t == null) || (t == JsonToken.END_OBJECT)) {
>                     break;
>                 }
>                 p.skipChildren();
>             }
>         } else {
35a45
>         }
JacksonDatabind-39 is multi-line patch!

checking JacksonDatabind/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java
58a59
>         try {
74a76
>         } catch (Exception e) {
75a78,79
>             throw JsonMappingException.wrapWithPath(e, String.class, ix);
>         }
92a97
>         try {
101a107
>         } catch (Exception e) {
102a109,110
>             throw JsonMappingException.wrapWithPath(e, String.class, ix);
>         }
JacksonDatabind-4 is multi-line patch!

checking JacksonDatabind/40
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/40/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java
147a148,149
>         @Override
>         public T getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
149a152,158
>             if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
>                 throw ctxt.mappingException(
>                         "Can not map Empty String as null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
>                         handledType().toString());
>             }
>             return _nullValue;
>         }
JacksonDatabind-40 is multi-line patch!

checking JacksonDatabind/41
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/41/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java
602c602,604
<         return constructType(type, constructType(contextClass));
---
>         TypeBindings bindings = (contextClass == null)
>                 ? TypeBindings.emptyBindings() : constructType(contextClass).getBindings();
>         return _fromAny(null, type, bindings);
610c612,614
<         return _fromAny(null, type, contextType.getBindings());
---
>         TypeBindings bindings = (contextType == null)
>                 ? TypeBindings.emptyBindings() : contextType.getBindings();
>         return _fromAny(null, type, bindings);
JacksonDatabind-41 is multi-line patch!

checking JacksonDatabind/42
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/42/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
283a284,286
>             if (_kind == STD_LOCALE) {
>                 return Locale.ROOT;
>             }
JacksonDatabind-42 is multi-line patch!

checking JacksonDatabind/43
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/43/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java
6a7
> import com.fasterxml.jackson.core.JsonToken;
78d78
<         Object id = _valueDeserializer.deserialize(p, ctxt);
85c85
<         if (id == null) {
---
>         if (p.hasToken(JsonToken.VALUE_NULL)) {
87a88
>         Object id = _valueDeserializer.deserialize(p, ctxt);
JacksonDatabind-43 is multi-line patch!

checking JacksonDatabind/44
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/44/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java
131a132
>         if (!_class.isAssignableFrom(subclass)) {
137a139
>         }
138a141,150
>         Class<?> next = subclass.getSuperclass();
>         if (next == _class) { // straight up parent class? Great.
>             return new SimpleType(subclass, _bindings, this,
>                     _superInterfaces, _valueHandler, _typeHandler, _asStatic);
>         }
>         if ((next != null) && _class.isAssignableFrom(next)) {
>             JavaType superb = _narrow(next);
>             return new SimpleType(subclass, _bindings, superb,
>                     null, _valueHandler, _typeHandler, _asStatic);
>         }
139a152,163
>         Class<?>[] nextI = subclass.getInterfaces();
>         for (Class<?> iface : nextI) {
>             if (iface == _class) { // directly implemented
>                 return new SimpleType(subclass, _bindings, null,
>                         new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic);
>             }
>             if (_class.isAssignableFrom(iface)) { // indirect, so recurse
>                 JavaType superb = _narrow(iface);
>                 return new SimpleType(subclass, _bindings, null,
>                         new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic);
>             }
>         }
140a165,166
>         throw new IllegalArgumentException("Internal error: Can not resolve sub-type for Class "+subclass.getName()+" to "
>                 +_class.getName());
JacksonDatabind-44 is multi-line patch!

checking JacksonDatabind/45
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/45/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
63c63,64
<                 if (format.getShape() == JsonFormat.Shape.STRING) {
---
>                 if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
>                                 || format.hasLocale() || format.hasTimeZone()) {
JacksonDatabind-45 is multi-line patch!

checking JacksonDatabind/46
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/46/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
156c156
<         sb.append(';');
---
>         sb.append(">;");
JacksonDatabind-46 is one-line patch!

checking JacksonDatabind/47
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/47/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java
815a816
>                 Class<?> currRaw = type.getRawClass();
818a820
>                     if (serClass.isAssignableFrom(currRaw)) { // common case
819a822,828
>                     } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
>                         type = tf.constructSpecializedType(type, serClass);
>                     } else {
>                         throw new JsonMappingException(null,
>                                 String.format("Can not refine serialization type %s into %s; types not related",
>                                         type, serClass.getName()));
>                     }
JacksonDatabind-47 is multi-line patch!

checking JacksonDatabind/48
JacksonDatabind-48 is multi-file patch!

checking JacksonDatabind/49
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/49/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java
49a50
>         if (id == null) {
50a52
>         }
JacksonDatabind-49 is multi-line patch!

checking JacksonDatabind/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/5/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java
657a658,661
>                     am = mixIns.find(m);
>                     if (am != null) {
>                         _addMixUnders(m, am);
>                     } else {
658a663
>                     }
JacksonDatabind-5 is multi-line patch!

checking JacksonDatabind/50
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
8a9
> import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;
386a388
>         List<BeanReferring> referrings = null;
428a431
>                 try {
429a433
>                 } catch (UnresolvedForwardReference reference) {
432a437,442
>                     BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);
>                     if (referrings == null) {
>                         referrings = new ArrayList<BeanReferring>();
>                     }
>                     referrings.add(referring);
>                 }
464a475,479
>         if (referrings != null) {
>             for (BeanReferring referring : referrings) {
>                referring.setBean(bean);
>             }
>         }
478a494,503
>     private BeanReferring handleUnresolvedReference(JsonParser p,
>             SettableBeanProperty prop, PropertyValueBuffer buffer,
>             UnresolvedForwardReference reference)
>         throws JsonMappingException
>     {
>         BeanReferring referring = new BeanReferring(reference, prop.getType().getRawClass(),
>                 buffer, prop);
>         reference.getRoid().appendReferring(referring);
>         return referring;
>     }
932a958,960
>     static class BeanReferring extends Referring {
>         private final SettableBeanProperty _prop;
>         private Object _bean;
933a962,964
>         public void setBean(Object bean) {
>             _bean = bean;
>         }
934a966,971
>         BeanReferring(UnresolvedForwardReference ref,
>                 Class<?> valueType, PropertyValueBuffer buffer, SettableBeanProperty prop)
>         {
>             super(ref, valueType);
>             _prop = prop;
>         }
935a973,977
>         @Override
>         public void handleResolvedForwardReference(Object id, Object value) throws IOException {
>             _prop.set(_bean, value);
>         }
>     }
JacksonDatabind-50 is multi-line patch!

checking JacksonDatabind/51
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/51/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java
183a184
>                     if (!type.hasGenericTypes()) {
184a186
>                     }
JacksonDatabind-51 is multi-line patch!

checking JacksonDatabind/52
JacksonDatabind-52 is multi-file patch!

checking JacksonDatabind/53
JacksonDatabind-53 is multi-file patch!

checking JacksonDatabind/54
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/54/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
134c134
<             if (declaredType.isReferenceType()) {
---
>             if (actualType.isReferenceType()) {
150c150
<             if (declaredType.isContainerType()
---
>             if (actualType.isContainerType()
JacksonDatabind-54 is multi-line patch!

checking JacksonDatabind/55
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/55/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java
9a10
> import com.fasterxml.jackson.databind.util.EnumValues;
82c83,84
<                 return new Default(Default.TYPE_ENUM, rawKeyType);
---
>                 return EnumKeySerializer.construct(rawKeyType,
>                         EnumValues.constructFromName(config, (Class<Enum<?>>) rawKeyType));
214a217,219
>     public static class EnumKeySerializer extends StdSerializer<Object>
>     {
>         protected final EnumValues _values;
215a221,224
>         protected EnumKeySerializer(Class<?> enumType, EnumValues values) {
>             super(enumType, false);
>             _values = values;
>         }
216a226,230
>         public static EnumKeySerializer construct(Class<?> enumType,
>                 EnumValues enumValues)
>         {
>             return new EnumKeySerializer(enumType, enumValues);
>         }
217a232,243
>         @Override
>         public void serialize(Object value, JsonGenerator g, SerializerProvider serializers)
>                 throws IOException
>         {
>             if (serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {
>                 g.writeFieldName(value.toString());
>                 return;
>             }
>             Enum<?> en = (Enum<?>) value;
>             g.writeFieldName(_values.serializedValueFor(en));
>         }
>     }
JacksonDatabind-55 is multi-line patch!

checking JacksonDatabind/56
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
231c231
<                     int ix = value.indexOf('_');
---
>                     int ix = _firstHyphenOrUnderscore(value);
237c237
<                     ix = value.indexOf('_');
---
>                     ix = _firstHyphenOrUnderscore(value);
291a292,301
>         protected int _firstHyphenOrUnderscore(String str)
>         {
>             for (int i = 0, end = str.length(); i < end; ++i) {
>                 char c = str.charAt(i);
>                 if (c == '_' || c == '-') {
>                     return i;
>                 }
>             }
>             return -1;
>         }
JacksonDatabind-56 is multi-line patch!

checking JacksonDatabind/57
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/57/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java src/main/java/com/fasterxml/jackson/databind/ObjectReader.java
1441c1441
<         return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), 
---
>         return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),
JacksonDatabind-57 is one-line patch!

checking JacksonDatabind/58
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/58/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
714a715,718
>             if ((mutator instanceof AnnotatedField)
>                     && "cause".equals(mutator.getName())) {
>                 ;
>             } else {
715a720
>             }
JacksonDatabind-58 is multi-line patch!

checking JacksonDatabind/59
JacksonDatabind-59 is multi-file patch!

checking JacksonDatabind/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/6/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
406,407c406,408
<                 c = dateStr.charAt(len-9);
<                 if (Character.isDigit(c)) {
---
>                 int timeLen = len - dateStr.lastIndexOf('T') - 6;
>                 if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss
>                     int offset = len - 5; // insertion offset, before tz-offset
409c410,425
<                     sb.insert(len-5, ".000");
---
>                     switch (timeLen) {
>                     case 11:
>                         sb.insert(offset, '0'); break;
>                     case 10:
>                         sb.insert(offset, "00"); break;
>                     case 9: // is this legal? (just second fraction marker)
>                         sb.insert(offset, "000"); break;
>                     case 8:
>                         sb.insert(offset, ".000"); break;
>                     case 7: // not legal to have single-digit second
>                         break;
>                     case 6: // probably not legal, but let's allow
>                         sb.insert(offset, "00.000");
>                     case 5: // is legal to omit seconds
>                         sb.insert(offset, ":00.000");
>                     }
421c437,443
<                 if (timeLen <= 8) {
---
>                 if (timeLen < 12) { // missing, or partial
>                     switch (timeLen) {
>                     case 11: sb.append('0');
>                     case 10: sb.append('0');
>                     case 9: sb.append('0');
>                         break;
>                     default:
422a445
>                     }
JacksonDatabind-6 is multi-line patch!

checking JacksonDatabind/60
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/60/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java
8a9
> import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
16a18
> import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
226c228,229
<             ser.serializeWithType(value, gen, provider, typeSer0);
---
>             TypeSerializerRerouter rr = new TypeSerializerRerouter(typeSer0, bean);
>             ser.serializeWithType(value, gen, provider, rr);
362a366,370
>     static class TypeSerializerRerouter
>         extends TypeSerializer
>     {
>         protected final TypeSerializer _typeSerializer;
>         protected final Object _forObject;
363a372,375
>         public TypeSerializerRerouter(TypeSerializer ts, Object ob) {
>             _typeSerializer = ts;
>             _forObject = ob;
>         }
364a377,380
>         @Override
>         public TypeSerializer forProperty(BeanProperty prop) { // should never get called
>             throw new UnsupportedOperationException();
>         }
365a382,385
>         @Override
>         public As getTypeInclusion() {
>             return _typeSerializer.getTypeInclusion();
>         }
366a387,390
>         @Override
>         public String getPropertyName() {
>             return _typeSerializer.getPropertyName();
>         }
367a392,395
>         @Override
>         public TypeIdResolver getTypeIdResolver() {
>             return _typeSerializer.getTypeIdResolver();
>         }
368a397,400
>         @Override
>         public void writeTypePrefixForScalar(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypePrefixForScalar(_forObject, gen);
>         }
369a402,405
>         @Override
>         public void writeTypePrefixForObject(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypePrefixForObject(_forObject, gen);
>         }
370a407,410
>         @Override
>         public void writeTypePrefixForArray(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypePrefixForArray(_forObject, gen);
>         }
371a412,415
>         @Override
>         public void writeTypeSuffixForScalar(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypeSuffixForScalar(_forObject, gen);
>         }
372a417,420
>         @Override
>         public void writeTypeSuffixForObject(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypeSuffixForObject(_forObject, gen);
>         }
373a422,425
>         @Override
>         public void writeTypeSuffixForArray(Object value, JsonGenerator gen) throws IOException {
>             _typeSerializer.writeTypeSuffixForArray(_forObject, gen);
>         }
374a427,429
>         public void writeTypePrefixForScalar(Object value, JsonGenerator gen, Class<?> type) throws IOException {
>             _typeSerializer.writeTypePrefixForScalar(_forObject, gen, type);
>         }
375a431,433
>         public void writeTypePrefixForObject(Object value, JsonGenerator gen, Class<?> type) throws IOException {
>             _typeSerializer.writeTypePrefixForObject(_forObject, gen, type);
>         }
376a435,437
>         public void writeTypePrefixForArray(Object value, JsonGenerator gen, Class<?> type) throws IOException {
>             _typeSerializer.writeTypePrefixForArray(_forObject, gen, type);
>         }
377a439,443
>         @Override
>         public void writeCustomTypePrefixForScalar(Object value, JsonGenerator gen, String typeId)
>                 throws IOException {
>             _typeSerializer.writeCustomTypePrefixForScalar(_forObject, gen, typeId);
>         }
378a445,448
>         @Override
>         public void writeCustomTypePrefixForObject(Object value, JsonGenerator gen, String typeId) throws IOException {
>             _typeSerializer.writeCustomTypePrefixForObject(_forObject, gen, typeId);
>         }
379a450,453
>         @Override
>         public void writeCustomTypePrefixForArray(Object value, JsonGenerator gen, String typeId) throws IOException {
>             _typeSerializer.writeCustomTypePrefixForArray(_forObject, gen, typeId);
>         }
380a455,458
>         @Override
>         public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator gen, String typeId) throws IOException {
>             _typeSerializer.writeCustomTypeSuffixForScalar(_forObject, gen, typeId);
>         }
381a460,463
>         @Override
>         public void writeCustomTypeSuffixForObject(Object value, JsonGenerator gen, String typeId) throws IOException {
>             _typeSerializer.writeCustomTypeSuffixForObject(_forObject, gen, typeId);
>         }
382a465,469
>         @Override
>         public void writeCustomTypeSuffixForArray(Object value, JsonGenerator gen, String typeId) throws IOException {
>             _typeSerializer.writeCustomTypeSuffixForArray(_forObject, gen, typeId);
>         }
>     }
JacksonDatabind-60 is multi-line patch!

checking JacksonDatabind/61
JacksonDatabind-61 is multi-file patch!

checking JacksonDatabind/62
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/62/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java
183a184,191
>             } else if (_valueInstantiator.canCreateUsingArrayDelegate()) {
>                 JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
>                 if (delegateType == null) {
>                     throw new IllegalArgumentException("Invalid array-delegate-creator definition for "+_collectionType
>                             +": value instantiator ("+_valueInstantiator.getClass().getName()
>                             +") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'");
>                 }
>                 delegateDeser = findDeserializer(ctxt, delegateType, property);
JacksonDatabind-62 is multi-line patch!

checking JacksonDatabind/63
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/63/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java
10d9
< import com.fasterxml.jackson.databind.util.ClassUtil;
130a130,139
>                     int arrays = 0;
>                     while (cls.isArray()) {
>                         cls = cls.getComponentType();
>                         ++arrays;
>                     }
>                     sb.append(cls.getName());
>                     while (--arrays >= 0) {
>                         sb.append("[]");
>                     }
>                     /* was:
136c145
<                     sb.append(cls.getSimpleName());
---
>                     */
JacksonDatabind-63 is multi-line patch!

checking JacksonDatabind/64
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/64/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java
151a152
>             Object defaultBean;
157c158
<             if (_useRealPropertyDefaults) {
---
>             if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) {
162c163,167
<                 valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);
---
>                 try {
>                     valueToSuppress = am.getValue(defaultBean);
>                 } catch (Exception e) {
>                     _throwWrapped(e, propDef.getName(), defaultBean);
>                 }
JacksonDatabind-64 is multi-line patch!

checking JacksonDatabind/65
JacksonDatabind-65 is multi-file patch!

checking JacksonDatabind/66
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/66/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
10a11
> import com.fasterxml.jackson.core.JsonParser;
17a19
> import com.fasterxml.jackson.databind.util.TokenBuffer;
313a316,317
>             TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt);
>             tb.writeString(key);
316c320,322
<                 Object result = _delegate.deserialize(ctxt.getParser(), ctxt);
---
>                 JsonParser p = tb.asParser();
>                 p.nextToken();
>                 Object result = _delegate.deserialize(p, ctxt);
JacksonDatabind-66 is multi-line patch!

checking JacksonDatabind/67
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/67/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
1403c1403,1405
<                 return _createEnumKeyDeserializer(ctxt, type);
---
>                 deser = _createEnumKeyDeserializer(ctxt, type);
>             } else {
>                 deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
1405d1406
<             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
JacksonDatabind-67 is multi-line patch!

checking JacksonDatabind/68
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java
1192c1192,1193
<         if (_delegateDeserializer != null) {
---
>         final JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
>         if (delegateDeser != null) {
1194c1195
<                     _delegateDeserializer.deserialize(p, ctxt));
---
>                     delegateDeser.deserialize(p, ctxt));
1219a1221
>         final JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
1222c1224
<             if (_delegateDeserializer != null) {
---
>             if (delegateDeser != null) {
1225c1227
<                             _delegateDeserializer.deserialize(p, ctxt));
---
>                             delegateDeser.deserialize(p, ctxt));
1234c1236
<             if (_delegateDeserializer != null) {
---
>             if (delegateDeser != null) {
1237c1239
<                             _delegateDeserializer.deserialize(p, ctxt));
---
>                             delegateDeser.deserialize(p, ctxt));
1247c1249
<         if (_delegateDeserializer != null) {
---
>         if (delegateDeser != null) {
1249c1251
<                     _delegateDeserializer.deserialize(p, ctxt));
---
>                     delegateDeser.deserialize(p, ctxt));
1269c1271,1272
<         if (_delegateDeserializer != null) {
---
>         JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
>         if (delegateDeser != null) {
1272c1275
<                         _delegateDeserializer.deserialize(p, ctxt));
---
>                         delegateDeser.deserialize(p, ctxt));
1291c1294,1295
<             if (_delegateDeserializer != null) {
---
>             JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
>             if (delegateDeser != null) {
1294c1298
<                             _delegateDeserializer.deserialize(p, ctxt));
---
>                             delegateDeser.deserialize(p, ctxt));
1304c1308,1309
<         if (_delegateDeserializer != null) {
---
>         JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
>         if (delegateDeser != null) {
1306c1311
<                     _delegateDeserializer.deserialize(p, ctxt));
---
>                     delegateDeser.deserialize(p, ctxt));
1318c1323,1324
<         if (_delegateDeserializer != null) {
---
>         JsonDeserializer<Object> delegateDeser = _delegateDeserializer();
>         if (delegateDeser != null) {
1321c1327
<                         _delegateDeserializer.deserialize(p, ctxt));
---
>                         delegateDeser.deserialize(p, ctxt));
1335,1345c1341
<         if (_arrayDelegateDeserializer != null) {
<             try {
<                 Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));
<                 if (_injectables != null) {
<                     injectValues(ctxt, bean);
<                 }
<                 return bean;
<             } catch (Exception e) {
<                 return wrapInstantiationProblem(e, ctxt);
<             }
<         }
---
>         JsonDeserializer<Object> delegateDeser = _arrayDelegateDeserializer;
1347,1348c1343
<         if (_delegateDeserializer != null) {
<             try {
---
>         if ((delegateDeser != null) || ((delegateDeser = _delegateDeserializer) != null)) {
1350c1345
<                     _delegateDeserializer.deserialize(p, ctxt));
---
>                     delegateDeser.deserialize(p, ctxt));
1355,1358d1349
<             } catch (Exception e) {
<                 wrapInstantiationProblem(e, ctxt);
<                 return null;
<             }
1398a1390,1396
>     private final JsonDeserializer<Object> _delegateDeserializer() {
>         JsonDeserializer<Object> deser = _delegateDeserializer;
>         if (deser == null) {
>             deser = _arrayDelegateDeserializer;
>         }
>         return deser;
>     }
JacksonDatabind-68 is multi-line patch!

checking JacksonDatabind/69
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
165c165
<             verifyNonDup(creator, C_ARRAY_DELEGATE, explicit);
---
>             if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {
166a167
>             }
168c169
<             verifyNonDup(creator, C_DELEGATE, explicit);
---
>             if (verifyNonDup(creator, C_DELEGATE, explicit)) {
169a171
>             }
176c178
<         verifyNonDup(creator, C_PROPS, explicit);
---
>         if (verifyNonDup(creator, C_PROPS, explicit)) {
194a197
>         }
299c302
<     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
---
>     protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
310c313
<                     return;
---
>                     return false;
332c335
<                     return;
---
>                     return false;
340a344
>         return true;
JacksonDatabind-69 is multi-line patch!

checking JacksonDatabind/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/7/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java
404a405
>         if (jp.getCurrentTokenId() != JsonToken.FIELD_NAME.id()) {
405a407,408
>             return this;
>         }
409a413,421
>         JsonToken t;
>         writeStartObject();
>         do {
>             copyCurrentStructure(jp);
>         } while ((t = jp.nextToken()) == JsonToken.FIELD_NAME);
>         if (t != JsonToken.END_OBJECT) {
>             throw ctxt.mappingException("Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got "+t);
>         }
>         writeEndObject();
JacksonDatabind-7 is multi-line patch!

checking JacksonDatabind/70
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/70/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java
440c440
<                 found = key.equals(prop.getName());
---
>                 found = key.equals(_hashArea[i-1]);
JacksonDatabind-70 is one-line patch!

checking JacksonDatabind/71
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/71/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java
75c75
<         if (raw == String.class || raw == Object.class) {
---
>         if (raw == String.class || raw == Object.class || raw == CharSequence.class) {
JacksonDatabind-71 is one-line patch!

checking JacksonDatabind/72
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/72/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java
92a93,94
>     @Override
>     public int getCreatorIndex() { return _delegate.getCreatorIndex(); }
167c169
< }
---
> }
\ No newline at end of file
JacksonDatabind-72 is multi-line patch!

checking JacksonDatabind/73
JacksonDatabind-73 is multi-file patch!

checking JacksonDatabind/74
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/74/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java
155a156,162
>         } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
>             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
>                 String str = p.getText().trim();
>                 if (str.isEmpty()) {
>                     return null;
>                 }
>             }
JacksonDatabind-74 is multi-line patch!

checking JacksonDatabind/75
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java
86c86
<         Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true);
---
>         Boolean serializeAsIndex = _isShapeWrittenUsingIndex(enumClass, format, true, null);
104c104
<                         format, false);
---
>                         format, false, _serializeAsIndex);
217c217,218
<             JsonFormat.Value format, boolean fromClass)
---
>             JsonFormat.Value format, boolean fromClass,
>             Boolean defaultValue)
221c222
<             return null;
---
>             return defaultValue;
225c226
<             return null;
---
>             return defaultValue;
JacksonDatabind-75 is multi-line patch!

checking JacksonDatabind/76
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/76/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java
583,603c583
<                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
<                     t = p.nextToken();
<                     Object bean;
<                     try {
<                         bean = creator.build(ctxt, buffer);
<                     } catch (Exception e) {
<                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
<                         continue;
<                     }
<                     while (t == JsonToken.FIELD_NAME) {
<                         p.nextToken();
<                         tokens.copyCurrentStructure(p);
<                         t = p.nextToken();
<                     }
<                     tokens.writeEndObject();
<                     if (bean.getClass() != _beanType.getRawClass()) {
<                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
<                         return null;
<                     }
<                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
<                 }
---
>                 buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));
JacksonDatabind-76 is multi-line patch!

checking JacksonDatabind/77
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/77/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
142a143
>         checkIllegalTypes(ctxt, type, beanDesc);
841a843,846
>     protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,
>             BeanDescription beanDesc)
>         throws JsonMappingException
>     {
843a849,850
>         Class<?> raw = type.getRawClass();
>         String name = raw.getSimpleName();
844a852,859
>         if ("TemplatesImpl".equals(name)) { // [databind#1599] 
>             if (raw.getName().startsWith("com.sun.org.apache.xalan")) {
>                 throw JsonMappingException.from(ctxt,
>                         String.format("Illegal type (%s) to deserialize: prevented for security reasons",
>                                 name));
>             }
>         }
>     }
JacksonDatabind-77 is multi-line patch!

checking JacksonDatabind/78
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
47a48,50
>     protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;
>     static {
>         Set<String> s = new HashSet<>();
49a53,62
>         s.add("org.apache.commons.collections.functors.InvokerTransformer");
>         s.add("org.apache.commons.collections.functors.InstantiateTransformer");
>         s.add("org.apache.commons.collections4.functors.InvokerTransformer");
>         s.add("org.apache.commons.collections4.functors.InstantiateTransformer");
>         s.add("org.codehaus.groovy.runtime.ConvertedClosure");
>         s.add("org.codehaus.groovy.runtime.MethodClosure");
>         s.add("org.springframework.beans.factory.ObjectFactory");
>         s.add("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
>         DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
>     }
55a69
>     protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;
155a170
>         checkIllegalTypes(ctxt, type, beanDesc);
877a893,896
>     protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,
>             BeanDescription beanDesc)
>         throws JsonMappingException
>     {
879a899
>         String full = type.getRawClass().getName();
880a901,905
>         if (_cfgIllegalClassNames.contains(full)) {
>             ctxt.reportBadTypeDefinition(beanDesc,
>                     "Illegal type (%s) to deserialize: prevented for security reasons", full);
>         }
>     }
JacksonDatabind-78 is multi-line patch!

checking JacksonDatabind/79
JacksonDatabind-79 is multi-file patch!

checking JacksonDatabind/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/8/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java
282a283
>             boolean verify;
289a291,292
>                 verify = true;
>             } else {
290a294
>                 verify = !explicit;
294c298
<             if (oldOne.getClass() == newOne.getClass()) {
---
>             if (verify && (oldOne.getClass() == newOne.getClass())) {
295a300,301
>                 Class<?> oldType = oldOne.getRawParameterType(0);
>                 Class<?> newType = newOne.getRawParameterType(0);
296a303
>                 if (oldType == newType) {
298a306
>                 }
299a308
>                 if (newType.isAssignableFrom(oldType)) {
300a310,311
>                     return;
>                 }
JacksonDatabind-8 is multi-line patch!

checking JacksonDatabind/80
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java
78a79
>         if (property != null) {
85a87
>             }
144a147
>         if (property != null) {
150a154
>             }
JacksonDatabind-80 is multi-line patch!

checking JacksonDatabind/81
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
763a764
>                     } else if (_primitiveAndWrapper(currRaw, serClass)) {
764a766
>                         type = type.withStaticTyping();
796a799
>                         } else if (_primitiveAndWrapper(currRaw, keyClass)) {
797a801
>                             keyType = keyType.withStaticTyping();
830a835
>                        } else if (_primitiveAndWrapper(currRaw, contentClass)) {
831a837
>                            contentType = contentType.withStaticTyping();
1119c1125,1126
<         if ((valueClass != null) && !type.hasRawClass(valueClass)) {
---
>         if ((valueClass != null) && !type.hasRawClass(valueClass)
>                 && !_primitiveAndWrapper(type, valueClass)) {
1135c1142,1143
<             if (keyClass != null) {
---
>             if ((keyClass != null)
>                     && !_primitiveAndWrapper(keyType, keyClass)) {
1151c1159,1160
<             if (contentClass != null) {
---
>             if ((contentClass != null)
>                     && !_primitiveAndWrapper(contentType, contentClass)) {
1456a1466,1475
>     private boolean _primitiveAndWrapper(Class<?> baseType, Class<?> refinement)
>     {
>         if (baseType.isPrimitive()) {
>             return baseType == ClassUtil.primitiveType(refinement);
>         }
>         if (refinement.isPrimitive()) {
>             return refinement == ClassUtil.primitiveType(baseType);
>         }
>         return false;
>     }
1457a1477,1486
>     private boolean _primitiveAndWrapper(JavaType baseType, Class<?> refinement)
>     {
>         if (baseType.isPrimitive()) {
>             return baseType.hasRawClass(ClassUtil.primitiveType(refinement));
>         }
>         if (refinement.isPrimitive()) {
>             return refinement == ClassUtil.primitiveType(baseType.getRawClass());
>         }
>         return false;
>     }
JacksonDatabind-81 is multi-line patch!

checking JacksonDatabind/82
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/82/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
495c495
<             ignored = ignorals.getIgnored();
---
>             ignored = ignorals.findIgnoredForDeserialization();
JacksonDatabind-82 is one-line patch!

checking JacksonDatabind/83
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/83/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java
119d118
<                 if (_deserialize(text, ctxt) != null) {
121d119
<                 }
JacksonDatabind-83 is multi-line patch!

checking JacksonDatabind/84
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/84/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
28a29,35
>     @Override
>     public JavaType getSuperClass() {
>     	if (_referencedType != null) {
>     		return _referencedType.getSuperClass();
>     	}
>     	return super.getSuperClass();
>     }
JacksonDatabind-84 is multi-line patch!

checking JacksonDatabind/85
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/85/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java
67,72c67
<                 if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
<                                 || format.hasLocale() || format.hasTimeZone()) {
<                     TimeZone tz = format.getTimeZone();
<                     final String pattern = format.hasPattern()
<                                     ? format.getPattern()
<                                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
---
>         if (format.hasPattern()) {
76,79c71,73
<                     SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
<                     if (tz == null) {
<                         tz = serializers.getTimeZone();
<                     }
---
>             SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);
>             TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
>                     : serializers.getTimeZone();
84a79,81
>         final boolean hasLocale = format.hasLocale();
>         final boolean hasTZ = format.hasTimeZone();
>         final boolean asString = (shape == JsonFormat.Shape.STRING);
85a83,85
>         if (!hasLocale && !hasTZ && !asString) {
>             return this;
>         }
86a87
>         DateFormat df0 = serializers.getConfig().getDateFormat();
87a89,98
>         if (df0 instanceof StdDateFormat) {
>             StdDateFormat std = (StdDateFormat) df0;
>             if (format.hasLocale()) {
>                 std = std.withLocale(format.getLocale());
>             }
>             if (format.hasTimeZone()) {
>                 std = std.withTimeZone(format.getTimeZone());
>             }
>             return withFormat(Boolean.FALSE, std);
>         }
91a103
>         if (!(df0 instanceof SimpleDateFormat)) {
92a105,110
>             serializers.reportMappingProblem(
> "Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",
> df0.getClass().getName());
>         }
>         SimpleDateFormat df = (SimpleDateFormat) df0;
>         if (hasLocale) {
94c112,121
<         return this;
---
>             df = new SimpleDateFormat(df.toPattern(), format.getLocale());
>         } else {
>             df = (SimpleDateFormat) df.clone();
>         }
>         TimeZone newTz = format.getTimeZone();
>         boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());
>         if (changeTZ) {
>             df.setTimeZone(newTz);
>         }
>         return withFormat(Boolean.FALSE, df);
JacksonDatabind-85 is multi-line patch!

checking JacksonDatabind/86
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/86/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
28a29,35
>     @Override
>     public JavaType getSuperClass() {
>     	if (_referencedType != null) {
>     		return _referencedType.getSuperClass();
>     	}
>     	return super.getSuperClass();
>     }
JacksonDatabind-86 is multi-line patch!

checking JacksonDatabind/87
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java
46a47
>     protected final static String DATE_FORMAT_STR_ISO8601_NO_TZ = "yyyy-MM-dd'T'HH:mm:ss.SSS";
64a66
>         DATE_FORMAT_STR_ISO8601_NO_TZ,
83a86
>     protected final static DateFormat DATE_FORMAT_ISO8601_NO_TZ; // since 2.8.10
101a105,106
>         DATE_FORMAT_ISO8601_NO_TZ = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);
>         DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);
131a137
>     protected transient DateFormat _formatISO8601_noTz; // 2.8.10
514d519
<                 StringBuilder sb = new StringBuilder(dateStr);
517a523
>                     StringBuilder sb = new StringBuilder(dateStr);
525a532
>                     dateStr = sb.toString();
527,530c534,535
<                 sb.append('Z');
<                 dateStr = sb.toString();
<                 df = _formatISO8601_z;
<                 formatStr = DATE_FORMAT_STR_ISO8601_Z;
---
>                 df = _formatISO8601_noTz;
>                 formatStr = DATE_FORMAT_STR_ISO8601_NO_TZ;
535,536c540,541
<                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,
<                             DEFAULT_TIMEZONE, _locale, _lenient);
---
>                     df = _formatISO8601_noTz = _cloneFormat(DATE_FORMAT_ISO8601_NO_TZ, formatStr,
>                             _timezone, _locale, _lenient);
596a602
>         _formatISO8601_noTz = null;
JacksonDatabind-87 is multi-line patch!

checking JacksonDatabind/88
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/88/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java
57a58
>             if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {
58a60,62
>                 throw new IllegalArgumentException(String.format(
>                         "Class %s not subtype of %s", t.getRawClass().getName(), _baseType));
>             }
JacksonDatabind-88 is multi-line patch!

checking JacksonDatabind/89
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/89/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
64a65,66
>         s.add("java.util.logging.FileHandler");
>         s.add("java.rmi.server.UnicastRemoteObject");
65a68,71
>         s.add("org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor");
>         s.add("org.springframework.beans.factory.config.PropertyPathFactoryBean");
>         s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource");
>         s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource");
JacksonDatabind-89 is multi-line patch!

checking JacksonDatabind/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/9/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java
26a27
>         Class<?> cls = value.getClass();
28c29,31
<         if (value instanceof Date) {
---
>         if (cls == String.class) {
>             str = (String) value;
>         } else if (Date.class.isAssignableFrom(cls)) {
30a34,35
>         } else if (cls == Class.class) {
>             str = ((Class<?>) value).getName();
JacksonDatabind-9 is multi-line patch!

checking JacksonDatabind/90
JacksonDatabind-90 is multi-file patch!

checking JacksonDatabind/91
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/91/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java
541c541,544
<                 return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null);
---
>                 if ((ct.getValueHandler() != null) || (ct.getTypeHandler() != null)) {
>                     return true;
>                 }
>             }
542a546,550
>             if (t.isMapLikeType()) {
>                 JavaType kt = t.getKeyType();
>                 if (kt.getValueHandler() != null) {
>                     return true;
>                 }
JacksonDatabind-91 is multi-line patch!

checking JacksonDatabind/92
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/92/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java
63a64,65
>         s.add("java.util.logging.FileHandler");
>         s.add("java.rmi.server.UnicastRemoteObject");
64a67,70
>         s.add("org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor");
>         s.add("org.springframework.beans.factory.config.PropertyPathFactoryBean");
>         s.add("com.mchange.v2.c3p0.JndiRefForwardingDataSource");
>         s.add("com.mchange.v2.c3p0.WrapperConnectionPoolDataSource");
JacksonDatabind-92 is multi-line patch!

checking JacksonDatabind/93
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/93/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
83,84c83,84
<             if (full.startsWith(PREFIX_STRING)) {
<                 for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
---
>             if (!raw.isInterface() && full.startsWith(PREFIX_STRING)) {
>                 for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
JacksonDatabind-93 is multi-line patch!

checking JacksonDatabind/94
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/94/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java
22a23
>     protected final static String PREFIX_C3P0 = "com.mchange.v2.c3p0.";
97a99,100
>                 }
>             } else if (full.startsWith(PREFIX_C3P0)) {
103a107,108
>                 if (full.endsWith("DataSource")) {
>                     break main_check;
JacksonDatabind-94 is multi-line patch!

checking JacksonDatabind/95
JacksonDatabind-95 is multi-file patch!

checking JacksonDatabind/96
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/96/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java
735c735
<             paramName = candidate.findImplicitParamName(0);
---
>             paramName = candidate.paramName(0);
JacksonDatabind-96 is one-line patch!

checking JacksonDatabind/97
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/97/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java src/main/java/com/fasterxml/jackson/databind/node/POJONode.java
114c114
<             gen.writeObject(_value);
---
>             ctxt.defaultSerializeValue(_value, gen);
JacksonDatabind-97 is one-line patch!

checking JacksonDatabind/98
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/98/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java
298c298,307
<                     buffer.assignParameter(typeProp, typeId);
---
>                     final Object v;
>                     if (typeProp.getType().hasRawClass(String.class)) {
>                         v = typeId;
>                     } else {
>                         TokenBuffer tb = new TokenBuffer(p, ctxt);
>                         tb.writeString(typeId);
>                         v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt);
>                         tb.close();
>                     }
>                     buffer.assignParameter(typeProp, v);
JacksonDatabind-98 is multi-line patch!

checking JacksonDatabind/99
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonDatabind/99/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java
168a169
>         sb.append('>');
JacksonDatabind-99 is one-line patch!

checking JacksonXml/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/1/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
511a512
>                 if (_parsingContext.inArray()) {
513a515,518
>                     _nextToken = JsonToken.END_OBJECT;
>                     _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
>                     return (_currToken = JsonToken.START_OBJECT);
>                 }
550,553c555,557
<                         _currToken = JsonToken.END_ARRAY;
<                         _parsingContext = _parsingContext.getParent();
<                         _namesToWrap = _parsingContext.getNamesToWrap();
<                         return _currToken;
---
>                         _nextToken = JsonToken.END_OBJECT;
>                         _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
>                         return (_currToken = JsonToken.START_OBJECT);
JacksonXml-1 is multi-line patch!

checking JacksonXml/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java
61a62
>     protected boolean _mixedText;
323a325
>             final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
325c327,329
<             if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {
---
>             if (startElementNext) {
>                 if (text == null || _allWs(text)) {
>                     _mixedText = false;
326a331,334
>                 }
>                 _mixedText = true;
>                 _textValue = text;
>                 return (_currentState = XML_TEXT);
329a338
>                 _mixedText = false;
332a342
>             _mixedText = false;
339a350,353
>             if (_mixedText){
>                 _mixedText = false;
>                 return _initStartElement();
>             }
505a520,531
>     protected boolean _allWs(String str)
>     {
>         final int len = (str == null) ? 0 : str.length();
>         if (len > 0) {
>             for (int i = 0; i < len; ++i) {
>                 if (str.charAt(i) > ' ') {
>                     return false;
>                 }
>             }
>         }
>         return true;
>     }
JacksonXml-2 is multi-line patch!

checking JacksonXml/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/3/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java
669d668
<             _currText = _xmlTokens.getText();
671c670
<             break;
---
>             return (_currText = _xmlTokens.getText());
JacksonXml-3 is multi-line patch!

checking JacksonXml/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/4/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java
203a204,207
>         QName rootName = _rootNameFromConfig();
>         if (rootName == null) {
>             rootName = ROOT_NAME_FOR_NULL;
>         }
205c209
<             _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);
---
>             _initWithRootName((ToXmlGenerator) jgen, rootName);
JacksonXml-4 is multi-line patch!

checking JacksonXml/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/5/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java
59c59
<         _rootNameLookup = src._rootNameLookup;
---
>         _rootNameLookup = new XmlRootNameLookup();
JacksonXml-5 is one-line patch!

checking JacksonXml/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JacksonXml/6/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java
842a843,855
>     @Override
>     public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException
>     {
>         if (data == null) {
>             writeNull();
>             return 0;
>         }
>         _verifyValueWrite("write Binary value");
>         if (_nextName == null) {
>             handleMissingName();
>         }
>         try {
>             if (_nextIsAttribute) {
843a857,859
>                 byte[] fullBuffer = toFullBuffer(data, dataLength);
>                 _xmlWriter.writeBinaryAttribute("", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);
>             } else if (checkNextIsUnwrapped()) {
844a861
>                 writeStreamAsBinary(data, dataLength);
845a863,876
>             } else {
>                 if (_xmlPrettyPrinter != null) {
>                     _xmlPrettyPrinter.writeLeafElement(_xmlWriter,
>                             _nextName.getNamespaceURI(), _nextName.getLocalPart(),
>                             toFullBuffer(data, dataLength), 0, dataLength);
>                 } else {
>                     _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
>                     writeStreamAsBinary(data, dataLength);
>                     _xmlWriter.writeEndElement();
>                 }
>             }
>         } catch (XMLStreamException e) {
>             StaxUtil.throwAsGenerationException(e, this);
>         }
846a878,879
>         return dataLength;
>     }
847a881,882
>     private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException 
>     {
848a884,897
>         byte[] tmp = new byte[3];
>         int offset = 0;
>         int read;
>         while((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) {
>             offset += read;
>             len -= read;
>             if(offset == 3) {
>                 offset = 0;
>                 _xmlWriter.writeBinary(tmp, 0, 3);
>             }
>             if (len == 0) {
>                 break;
>             }
>         }
850a900,903
>         if(offset > 0) {
>             _xmlWriter.writeBinary(tmp, 0, offset);
>         }
>     }
865a919,922
>     private byte[] toFullBuffer(InputStream data, final int len) throws IOException 
>     {
>         byte[] result = new byte[len];
>         int offset = 0;
866a924,932
>         for (; offset < len; ) {
>             int count = data.read(result, offset, len - offset);
>             if (count < 0) {
>                 _reportError("Too few bytes available: missing "+(len - offset)+" bytes (out of "+len+")");
>             }
>             offset += count;
>         }
>         return result;
>     }
JacksonXml-6 is multi-line patch!

checking Jsoup/1
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/1/src/main/java/org/jsoup/nodes/Document.java src/main/java/org/jsoup/nodes/Document.java
125,126c125,126
<             body().appendChild(new TextNode(" ", ""));
<             body().appendChild(node);
---
>             body().prependChild(node);
>             body().prependChild(new TextNode(" ", ""));
Jsoup-1 is multi-line patch!

checking Jsoup/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/10/src/main/java/org/jsoup/nodes/Node.java src/main/java/org/jsoup/nodes/Node.java
172a173,174
>                 if (relUrl.startsWith("?"))
>                     relUrl = base.getPath() + relUrl;
Jsoup-10 is multi-line patch!

checking Jsoup/11
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/11/src/main/java/org/jsoup/select/Selector.java src/main/java/org/jsoup/select/Selector.java
109a110,111
>         } else if (tq.matches(":has(")) {
>             elements.addAll(root.getAllElements());
180a183,184
>         } else if (tq.matches(":not(")) {
>             return not();
304a309,312
>     private Elements not() {
>         tq.consume(":not");
>         String subQuery = tq.chompBalanced('(', ')');
>         Validate.notEmpty(subQuery, ":not(selector) subselect must not be empty");
305a314,315
>         return filterOut(root.getAllElements(), select(subQuery, root));
>     }
398a409,423
>     static Elements filterOut(Collection<Element> elements, Collection<Element> outs) {
>         Elements output = new Elements();
>         for (Element el: elements) {
>             boolean found = false;
>             for (Element out: outs) {
>                 if (el.equals(out)) {
>                     found = true;
>                     break;
>                 }
>             }
>             if (!found)
>                 output.add(el);
>         }
>         return output;
>     }
Jsoup-11 is multi-line patch!

checking Jsoup/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/12/src/main/java/org/jsoup/select/Selector.java src/main/java/org/jsoup/select/Selector.java
139c139
<         String subQuery = tq.consumeToAny(combinators);
---
>         String subQuery = consumeSubQuery(); // support multi > childs
155a156,169
>     private String consumeSubQuery() {
>         StringBuilder sq = new StringBuilder();
>         while (!tq.isEmpty()) {
>             if (tq.matches("("))
>                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
>             else if (tq.matches("["))
>                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
>             else if (tq.matchesAny(combinators))
>                 break;
>             else
>                 sq.append(tq.consume());
>         }
>         return sq.toString();
>     }
Jsoup-12 is multi-line patch!

checking Jsoup/13
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/13/src/main/java/org/jsoup/nodes/Node.java src/main/java/org/jsoup/nodes/Node.java
106a107,111
>         if (attributeKey.toLowerCase().startsWith("abs:")) {
>             String key = attributeKey.substring("abs:".length());
>             if (attributes.hasKey(key) && !absUrl(key).equals(""))
>                 return true;
>         }
Jsoup-13 is multi-line patch!

checking Jsoup/14
Jsoup-14 is multi-file patch!

checking Jsoup/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/15/src/main/java/org/jsoup/parser/TreeBuilderState.java src/main/java/org/jsoup/parser/TreeBuilderState.java
283c283
<                     } else if (StringUtil.in(name, "base", "basefont", "bgsound", "command", "link", "meta", "noframes", "style", "title")) {
---
>                     } else if (StringUtil.in(name, "base", "basefont", "bgsound", "command", "link", "meta", "noframes", "script", "style", "title")) {
Jsoup-15 is one-line patch!

checking Jsoup/16
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/16/src/main/java/org/jsoup/nodes/DocumentType.java src/main/java/org/jsoup/nodes/DocumentType.java
3a4
> import org.jsoup.helper.Validate;
20a22
>         Validate.notEmpty(name);
33c35
<         accum.append("<!DOCTYPE html");
---
>         accum.append("<!DOCTYPE ").append(attr("name"));
37c39
<             accum.append(' ').append(attr("systemId")).append("\"");
---
>             accum.append(" \"").append(attr("systemId")).append("\"");
Jsoup-16 is multi-line patch!

checking Jsoup/17
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/17/src/main/java/org/jsoup/parser/TreeBuilderState.java src/main/java/org/jsoup/parser/TreeBuilderState.java
1451c1451
<     private static String nullString = String.valueOf(0x0000);
---
>     private static String nullString = String.valueOf('\u0000');
Jsoup-17 is one-line patch!

checking Jsoup/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/18/src/main/java/org/jsoup/parser/CharacterReader.java src/main/java/org/jsoup/parser/CharacterReader.java
17a18
>         input = input.replaceAll("\r\n?", "\n"); // normalise carriage returns to newlines
99c100
<         String data = input.substring(pos, input.length() - 1);
---
>         String data = input.substring(pos, input.length());
Jsoup-18 is multi-line patch!

checking Jsoup/19
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/19/src/main/java/org/jsoup/safety/Whitelist.java src/main/java/org/jsoup/safety/Whitelist.java
341a342,343
>         if (value.length() == 0)
>             value = attr.getValue(); // if it could not be made abs, run as-is to allow custom unknown protocols
Jsoup-19 is multi-line patch!

checking Jsoup/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/2/src/main/java/org/jsoup/parser/Parser.java src/main/java/org/jsoup/parser/Parser.java
147a148
>             popStackToClose(tag);
Jsoup-2 is one-line patch!

checking Jsoup/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/20/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
97a98,99
>             if (docData.charAt(0) == 65279)
>                 docData = docData.substring(1);
Jsoup-20 is multi-line patch!

checking Jsoup/21
Jsoup-21 is multi-file patch!

checking Jsoup/22
Jsoup-22 is multi-file patch!

checking Jsoup/23
Jsoup-23 is multi-file patch!

checking Jsoup/24
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/24/src/main/java/org/jsoup/parser/TokeniserState.java src/main/java/org/jsoup/parser/TokeniserState.java
558d557
<                 r.advance();
Jsoup-24 is one-line patch!

checking Jsoup/25
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/25/src/main/java/org/jsoup/parser/Tag.java src/main/java/org/jsoup/parser/Tag.java
218c218
<     private static final String[] preserveWhitespaceTags = {"pre", "plaintext", "title"};
---
>     private static final String[] preserveWhitespaceTags = {"pre", "plaintext", "title", "textarea"};
Jsoup-25 is one-line patch!

checking Jsoup/26
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/26/src/main/java/org/jsoup/safety/Cleaner.java src/main/java/org/jsoup/safety/Cleaner.java
42a43
>         if (dirtyDocument.body() != null) // frameset documents won't have a body. the clean doc will have empty body.
Jsoup-26 is one-line patch!

checking Jsoup/27
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/27/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
131a132
>             if (Charset.isSupported(charset)) return charset;
133c134
<             return charset;
---
>             if (Charset.isSupported(charset)) return charset;
Jsoup-27 is multi-line patch!

checking Jsoup/28
Jsoup-28 is multi-file patch!

checking Jsoup/29
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/29/src/main/java/org/jsoup/nodes/Document.java src/main/java/org/jsoup/nodes/Document.java
2a3
> import org.jsoup.helper.StringUtil;
69c70
<         return titleEl != null ? titleEl.text().trim() : "";
---
>         return titleEl != null ? StringUtil.normaliseWhitespace(titleEl.text()).trim() : "";
Jsoup-29 is multi-line patch!

checking Jsoup/3
Jsoup-3 is multi-file patch!

checking Jsoup/30
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/30/src/main/java/org/jsoup/safety/Cleaner.java src/main/java/org/jsoup/safety/Cleaner.java
5a6,7
> import org.jsoup.select.NodeTraversor;
> import org.jsoup.select.NodeVisitor;
70,72c72,80
<     private int copySafeNodes(Element root, Element destination) {
<         List<Node> sourceChildren = root.childNodes();
<         int numDiscarded = 0;
---
>     private final class CleaningVisitor implements NodeVisitor {
>         private int numDiscarded = 0;
>         private final Element root;
>         private Element destination; // current element to append nodes to
> 
>         private CleaningVisitor(Element root, Element destination) {
>             this.root = root;
>             this.destination = destination;
>         }
74c82
<         for (Node source : sourceChildren) {
---
>         public void head(Node source, int depth) {
84,85c92,93
<                     numDiscarded += copySafeNodes(sourceEl, destChild);
<                 } else {
---
>                     destination = destChild;
>                 } else if (source != root) { // not a safe tag, so don't add. don't count root against discarded.
87d94
<                     numDiscarded += copySafeNodes(sourceEl, destination);
92a100,101
>             } else { // else, we don't care about comments, xml proc instructions, etc
>                 numDiscarded++;
95d103
<         return numDiscarded;
96a105,110
>         public void tail(Node source, int depth) {
>             if (source instanceof Element && whitelist.isSafeTag(source.nodeName())) {
>                 destination = destination.parent(); // would have descended, so pop destination stack
>             }
>         }
>     }
97a112,116
>     private int copySafeNodes(Element source, Element dest) {
>         CleaningVisitor cleaningVisitor = new CleaningVisitor(source, dest);
>         NodeTraversor traversor = new NodeTraversor(cleaningVisitor);
>         traversor.traverse(source);
>         return cleaningVisitor.numDiscarded;
Jsoup-30 is multi-line patch!

checking Jsoup/31
Jsoup-31 is multi-file patch!

checking Jsoup/32
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/32/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
1138c1138
<         clone.classNames();
---
>         clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames
Jsoup-32 is one-line patch!

checking Jsoup/33
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/33/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
161a162
>             tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data
Jsoup-33 is one-line patch!

checking Jsoup/34
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/34/src/main/java/org/jsoup/parser/CharacterReader.java src/main/java/org/jsoup/parser/CharacterReader.java
91c91
<             if (offset < length) {
---
>             if (offset < length && last <= length) {
Jsoup-34 is one-line patch!

checking Jsoup/35
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/35/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
725a726
>                             adopter.attributes().addAll(formatEl.attributes());
Jsoup-35 is one-line patch!

checking Jsoup/36
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/36/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
9a10
> import java.nio.charset.IllegalCharsetNameException;
19c20
<     private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");
---
>     private static final Pattern charsetPattern = Pattern.compile("(?i)\\bcharset=\\s*(?:\"|')?([^\\s,;\"']*)");
86a88,96
>                     if (foundCharset == null && meta.hasAttr("charset")) {
>                         try {
>                             if (Charset.isSupported(meta.attr("charset"))) {
>                                 foundCharset = meta.attr("charset");
>                             }
>                         } catch (IllegalCharsetNameException e) {
>                             foundCharset = null;
>                         }
>                     }
91a102
>                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
160a172,174
>             charset = charset.replace("charset=", "");
>             if (charset.isEmpty()) return null;
>             try {
163a178
>             } catch (IllegalCharsetNameException e) {
164a180,181
>                 return null;
>             }
Jsoup-36 is multi-line patch!

checking Jsoup/37
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/37/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
1101c1101
<         return accum.toString().trim();
---
>         return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();
Jsoup-37 is one-line patch!

checking Jsoup/38
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/38/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
454a455
>                         if (tb.getFromStack("svg") == null)
455a457,458
>                         else
>                             tb.insert(startTag);
Jsoup-38 is multi-line patch!

checking Jsoup/39
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/39/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
118a119
>             doc = null;
Jsoup-39 is one-line patch!

checking Jsoup/4
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/4/src/main/java/org/jsoup/nodes/Entities.java src/main/java/org/jsoup/nodes/Entities.java
64c64
<                 String name = m.group(1).toLowerCase();
---
>                 String name = m.group(1);
2235c2235
<             baseByVal.put(c, ((String) entity[0]).toLowerCase());
---
>             baseByVal.put(c, ((String) entity[0]));
2240c2240
<             fullByVal.put(c, ((String) entity[0]).toLowerCase());
---
>             fullByVal.put(c, ((String) entity[0]));
Jsoup-4 is multi-line patch!

checking Jsoup/40
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/40/src/main/java/org/jsoup/nodes/DocumentType.java src/main/java/org/jsoup/nodes/DocumentType.java
22d21
<         Validate.notEmpty(name);
Jsoup-40 is one-line patch!

checking Jsoup/41
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/41/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
1175c1175
<         return this == o;
---
>         return tag.equals(element.tag);
Jsoup-41 is one-line patch!

checking Jsoup/42
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/42/src/main/java/org/jsoup/nodes/FormElement.java src/main/java/org/jsoup/nodes/FormElement.java
79a80
>             if (el.hasAttr("disabled")) continue; // skip disabled form inputs
99c100
<                     final String val = el.val();
---
>                     final String val = el.val().length() >  0 ? el.val() : "on";
Jsoup-42 is multi-line patch!

checking Jsoup/43
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/43/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
574c574
<             if (element.equals(search))
---
>             if (element == search)
Jsoup-43 is one-line patch!

checking Jsoup/44
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/44/src/main/java/org/jsoup/parser/TreeBuilder.java src/main/java/org/jsoup/parser/TreeBuilder.java
60a61,63
>         if (currentToken == start) { // don't recycle an in-use token
>             return process(new Token.StartTag().name(name));
>         }
64a68,70
>         if (currentToken == start) { // don't recycle an in-use token
>             return process(new Token.StartTag().nameAttr(name, attrs));
>         }
70a77,79
>         if (currentToken == end) { // don't recycle an in-use token
>             return process(new Token.EndTag().name(name));
>         }
Jsoup-44 is multi-line patch!

checking Jsoup/45
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/45/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
394c394
<             } else if (("td".equals(name) || "td".equals(name) && !last)) {
---
>             } else if (("td".equals(name) || "th".equals(name) && !last)) {
Jsoup-45 is one-line patch!

checking Jsoup/46
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/46/src/main/java/org/jsoup/nodes/Entities.java src/main/java/org/jsoup/nodes/Entities.java
118c118
<                             accum.append(c);
---
>                             accum.append("&#xa0;");
Jsoup-46 is one-line patch!

checking Jsoup/47
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/47/src/main/java/org/jsoup/nodes/Entities.java src/main/java/org/jsoup/nodes/Entities.java
122c122
<                         if (!inAttribute)
---
>                         if (!inAttribute || escapeMode == EscapeMode.xhtml)
Jsoup-47 is one-line patch!

checking Jsoup/48
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/48/src/main/java/org/jsoup/helper/HttpConnection.java src/main/java/org/jsoup/helper/HttpConnection.java
773c773
<                     if (!values.isEmpty())
---
>                     if (values.size() == 1)
774a775,784
>                     else if (values.size() > 1) {
>                         StringBuilder accum = new StringBuilder();
>                         for (int i = 0; i < values.size(); i++) {
>                             final String val = values.get(i);
>                             if (i != 0)
>                                 accum.append(", ");
>                             accum.append(val);
>                         }
>                         header(name, accum.toString());
>                     }
Jsoup-48 is multi-line patch!

checking Jsoup/49
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/49/src/main/java/org/jsoup/nodes/Node.java src/main/java/org/jsoup/nodes/Node.java
444a445
>             reindexChildren(index);
446d446
<         reindexChildren(index);
Jsoup-49 is one-line patch!

checking Jsoup/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/5/src/main/java/org/jsoup/parser/Parser.java src/main/java/org/jsoup/parser/Parser.java
206c206,207
<             tq.consume();
---
>             if (value.length() == 0) // no key, no val; unknown char, keep popping so not get stuck
>                 tq.advance();
Jsoup-5 is multi-line patch!

checking Jsoup/50
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/50/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
92a93,106
>         byteData.mark();
>         byte[] bom = new byte[4];
>         byteData.get(bom);
>         byteData.rewind();
>         if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE
>                 bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE
>             charsetName = "UTF-32"; // and I hope it's on your system
>         } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE
>                 bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
>             charsetName = "UTF-16"; // in all Javas
>         } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
>             charsetName = "UTF-8"; // in all Javas
>             byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed
>         }
125,131d138
<         }
<         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
<             byteData.rewind();
<             docData = Charset.forName(defaultCharset).decode(byteData).toString();
<             docData = docData.substring(1);
<             charsetName = defaultCharset;
<             doc = null;
Jsoup-50 is multi-line patch!

checking Jsoup/51
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/51/src/main/java/org/jsoup/parser/CharacterReader.java src/main/java/org/jsoup/parser/CharacterReader.java
300c300
<         return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
---
>         return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
Jsoup-51 is one-line patch!

checking Jsoup/52
Jsoup-52 is multi-file patch!

checking Jsoup/53
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/53/src/main/java/org/jsoup/parser/TokenQueue.java src/main/java/org/jsoup/parser/TokenQueue.java
264a265
>         boolean inQuote = false;
269a271,274
>                 if (c.equals('\'') || c.equals('"') && c != open)
>                     inQuote = !inQuote;
>                 if (inQuote)
>                     continue;
Jsoup-53 is multi-line patch!

checking Jsoup/54
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/54/src/main/java/org/jsoup/helper/W3CDom.java src/main/java/org/jsoup/helper/W3CDom.java
125a126
>                 if (key.matches("[a-zA-Z_:]{1}[-a-zA-Z0-9_:.]*"))
Jsoup-54 is one-line patch!

checking Jsoup/55
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/55/src/main/java/org/jsoup/parser/TokeniserState.java src/main/java/org/jsoup/parser/TokeniserState.java
882a883
>                     r.unconsume();
Jsoup-55 is one-line patch!

checking Jsoup/56
Jsoup-56 is multi-file patch!

checking Jsoup/57
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/57/src/main/java/org/jsoup/nodes/Attributes.java src/main/java/org/jsoup/nodes/Attributes.java
125c125
<                 attributes.remove(attrKey);
---
>                 it.remove();
Jsoup-57 is one-line patch!

checking Jsoup/58
Jsoup-58 is multi-file patch!

checking Jsoup/59
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/59/src/main/java/org/jsoup/parser/Token.java src/main/java/org/jsoup/parser/Token.java
106a107
>                 if (pendingAttributeName.length() > 0) {
115a117
>                 }
Jsoup-59 is multi-line patch!

checking Jsoup/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/6/src/main/java/org/jsoup/nodes/Entities.java src/main/java/org/jsoup/nodes/Entities.java
70c70
<                 m.appendReplacement(accum, c);
---
>                 m.appendReplacement(accum, Matcher.quoteReplacement(c));
72c72
<                 m.appendReplacement(accum, m.group(0));
---
>                 m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // replace with original string
Jsoup-6 is multi-line patch!

checking Jsoup/60
Jsoup-60 is multi-file patch!

checking Jsoup/61
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/61/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
1092c1092
<         final String classAttr = attributes.get("class");
---
>         final String classAttr = attributes.getIgnoreCase("class");
Jsoup-61 is one-line patch!

checking Jsoup/62
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/62/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
764c764
<             String name = t.asEndTag().normalName();
---
>             String name = t.asEndTag().name(); // matches with case sensitivity if enabled
Jsoup-62 is one-line patch!

checking Jsoup/63
Jsoup-63 is multi-file patch!

checking Jsoup/64
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/64/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
1489d1488
<         tb.insert(startTag);
1492a1492
>         tb.insert(startTag);
Jsoup-64 is one-line patch!

checking Jsoup/65
Jsoup-65 is multi-file patch!

checking Jsoup/66
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/66/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
89c89
<             childNodes = new NodeList(4);
---
>             childNodes = new NodeList(this, 4);
1402c1402
<         clone.childNodes = new NodeList(childNodes.size());
---
>         clone.childNodes = new NodeList(clone, childNodes.size());
1408,1409c1408,1411
<     private final class NodeList extends ChangeNotifyingArrayList<Node> {
<         NodeList(int initialCapacity) {
---
>     private static final class NodeList extends ChangeNotifyingArrayList<Node> {
>         private final Element owner;
> 
>         NodeList(Element owner, int initialCapacity) {
1410a1413
>             this.owner = owner;
1414c1417
<             nodelistChanged();
---
>             owner.nodelistChanged();
Jsoup-66 is multi-line patch!

checking Jsoup/67
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/67/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
41a42
>     public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages
467a469,471
>         if (depth > MaxScopeSearchDepth) {
>             depth = MaxScopeSearchDepth;
>         }
Jsoup-67 is multi-line patch!

checking Jsoup/68
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/68/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
468,471c468
<         int bottom = stack.size() -1;
<         if (bottom > MaxScopeSearchDepth) {
<             bottom = MaxScopeSearchDepth;
<         }
---
>         final int bottom = stack.size() -1;
Jsoup-68 is multi-line patch!

checking Jsoup/69
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/69/src/main/java/org/jsoup/nodes/FormElement.java src/main/java/org/jsoup/nodes/FormElement.java
48a49,53
>     @Override
>     protected void removeChild(Node out) {
>         super.removeChild(out);
>         elements.remove(out);
>     }
Jsoup-69 is multi-line patch!

checking Jsoup/7
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/7/src/main/java/org/jsoup/nodes/Document.java src/main/java/org/jsoup/nodes/Document.java
4a5
> import org.jsoup.select.Elements;
112a114,115
>         normaliseStructure("head", htmlEl);
>         normaliseStructure("body", htmlEl);
136a140,154
>     private void normaliseStructure(String tag, Element htmlEl) {
>         Elements elements = this.getElementsByTag(tag);
>         Element master = elements.first(); // will always be available as created above if not existent
>         if (elements.size() > 1) { // dupes, move contents to master
>             List<Node> toMove = new ArrayList<Node>();
>             for (int i = 1; i < elements.size(); i++) {
>                 Node dupe = elements.get(i);
>                 for (Node node : dupe.childNodes)
>                     toMove.add(node);
>                 dupe.remove();
>             }
> 
>             for (Node dupe : toMove)
>                 master.appendChild(dupe);
>         }
137a156,159
>         if (!master.parent().equals(htmlEl)) {
>             htmlEl.appendChild(master); // includes remove()            
>         }
>     }
Jsoup-7 is multi-line patch!

checking Jsoup/70
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/70/src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java
1090a1091,1092
>             int i = 0;
>             do {
1093,1094c1095,1097
<                 else
<                     return el.parent() != null && el.parent().tag.preserveWhitespace();
---
>                 el = el.parent();
>                 i++;
>             } while (i < 6 && el != null);
Jsoup-70 is multi-line patch!

checking Jsoup/71
Jsoup-71 is multi-file patch!

checking Jsoup/72
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/72/src/main/java/org/jsoup/parser/CharacterReader.java src/main/java/org/jsoup/parser/CharacterReader.java
426a427,428
>         if (count < 1)
>             return "";
Jsoup-72 is multi-line patch!

checking Jsoup/73
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/73/src/main/java/org/jsoup/helper/W3CDom.java src/main/java/org/jsoup/helper/W3CDom.java
21a22
> import java.util.Stack;
73c74
<         private final HashMap<String, String> namespaces = new HashMap<>();
---
>         private final Stack<HashMap<String, String>> namespacesStack = new Stack<>(); // stack of namespaces, prefix => urn
77a79
>             this.namespacesStack.push(new HashMap<String, String>());
80a83
>             namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack
85c88
<                 String namespace = namespaces.get(prefix);
---
>                 String namespace = namespacesStack.peek().get(prefix);
115a119
>             namespacesStack.pop();
144c148
<                 namespaces.put(prefix, attr.getValue());
---
>                 namespacesStack.peek().put(prefix, attr.getValue());
Jsoup-73 is multi-line patch!

checking Jsoup/74
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/74/src/main/java/org/jsoup/helper/StringUtil.java src/main/java/org/jsoup/helper/StringUtil.java
130a131,132
>     public static boolean isInvisibleChar(int c) {
>         return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);
131a134
>     }
165c168
<             else {
---
>             else if (!isInvisibleChar(c)) {
Jsoup-74 is multi-line patch!

checking Jsoup/75
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/75/src/main/java/org/jsoup/nodes/Attributes.java src/main/java/org/jsoup/nodes/Attributes.java
319,320c319
<             if (!(out.syntax() == Document.OutputSettings.Syntax.html
<                 && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
---
>             if (!Attribute.shouldCollapseAttribute(key, val, out)) {
Jsoup-75 is multi-line patch!

checking Jsoup/76
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/76/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java
381a382
>                         tb.reader.matchConsume("\n"); // ignore LF if next token
Jsoup-76 is one-line patch!

checking Jsoup/77
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/77/src/main/java/org/jsoup/parser/XmlTreeBuilder.java src/main/java/org/jsoup/parser/XmlTreeBuilder.java
117c117
<         String elName = endTag.name();
---
>         String elName = endTag.normalName();
Jsoup-77 is one-line patch!

checking Jsoup/78
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/78/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
2a3
> import org.jsoup.UncheckedIOException;
150a152
>             try {
151a154
>             } catch (UncheckedIOException e) {
152a156,157
>                 throw e.ioException();
>             }
Jsoup-78 is multi-line patch!

checking Jsoup/79
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/79/src/main/java/org/jsoup/nodes/LeafNode.java src/main/java/org/jsoup/nodes/LeafNode.java
4a5
> import java.util.Collections;
7a9
>     private static final List<Node> EmptyNodes = Collections.emptyList();
94c96
<         throw new UnsupportedOperationException("Leaf Nodes do not have child nodes.");
---
>         return EmptyNodes;
Jsoup-79 is multi-line patch!

checking Jsoup/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/8/src/main/java/org/jsoup/nodes/Node.java src/main/java/org/jsoup/nodes/Node.java
363c363
<         new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);
---
>         new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);
366a367,369
>     private Document.OutputSettings getOutputSettings() {
>         return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document("")).outputSettings();
>     }
Jsoup-8 is multi-line patch!

checking Jsoup/80
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/80/src/main/java/org/jsoup/parser/XmlTreeBuilder.java src/main/java/org/jsoup/parser/XmlTreeBuilder.java
90a91
>                 if (doc.childNodeSize() > 0) {
93a95
>                 } // else, we couldn't parse it as a decl, so leave as a comment
Jsoup-80 is multi-line patch!

checking Jsoup/81
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/81/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
4a5
> import org.jsoup.nodes.Comment;
135a137,141
>                 else if (first instanceof Comment) {
>                     Comment comment = (Comment) first;
>                     if (comment.isXmlDeclaration())
>                         decl = comment.asXmlDeclaration();
>                 }
Jsoup-81 is multi-line patch!

checking Jsoup/82
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/82/src/main/java/org/jsoup/helper/DataUtil.java src/main/java/org/jsoup/helper/DataUtil.java
170a171
>             if (!charset.canEncode()) {
171a173,174
>                 doc.charset(Charset.forName(defaultCharset));
>             }
Jsoup-82 is multi-line patch!

checking Jsoup/83
Jsoup-83 is multi-file patch!

checking Jsoup/84
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/84/src/main/java/org/jsoup/helper/W3CDom.java src/main/java/org/jsoup/helper/W3CDom.java
91c91,92
<                 Element el = 
---
>                 Element el = namespace == null && tagName.contains(":") ?
>                     doc.createElementNS("", tagName) : // doesn't have a real namespace defined
Jsoup-84 is multi-line patch!

checking Jsoup/85
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/85/src/main/java/org/jsoup/nodes/Attribute.java src/main/java/org/jsoup/nodes/Attribute.java
44c44
<         this.key = key.trim();
---
>         key = key.trim();
45a46
>         this.key = key;
Jsoup-85 is multi-line patch!

checking Jsoup/86
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/86/src/main/java/org/jsoup/nodes/Comment.java src/main/java/org/jsoup/nodes/Comment.java
78c78
<         if (doc.childNodeSize() > 0) {
---
>         if (doc.children().size() > 0) {
Jsoup-86 is one-line patch!

checking Jsoup/87
Jsoup-87 is multi-file patch!

checking Jsoup/88
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/88/src/main/java/org/jsoup/nodes/Attribute.java src/main/java/org/jsoup/nodes/Attribute.java
80c80
<         return val;
---
>         return Attributes.checkNotNull(val);
Jsoup-88 is one-line patch!

checking Jsoup/89
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/89/src/main/java/org/jsoup/nodes/Attribute.java src/main/java/org/jsoup/nodes/Attribute.java
88c88
<         String oldVal = parent.get(this.key);
---
>         String oldVal = this.val;
89a90
>             oldVal = parent.get(this.key); // trust the container more
Jsoup-89 is multi-line patch!

checking Jsoup/9
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/9/src/main/java/org/jsoup/nodes/Entities.java src/main/java/org/jsoup/nodes/Entities.java
38c38
<     private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
---
>     private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);?");
Jsoup-9 is one-line patch!

checking Jsoup/90
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/90/src/main/java/org/jsoup/helper/HttpConnection.java src/main/java/org/jsoup/helper/HttpConnection.java
423a424,425
>                 if (end >= input.length)
>                     return false;
Jsoup-90 is multi-line patch!

checking Jsoup/91
Jsoup-91 is multi-file patch!

checking Jsoup/92
Jsoup-92 is multi-file patch!

checking Jsoup/93
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/Jsoup/93/src/main/java/org/jsoup/nodes/FormElement.java src/main/java/org/jsoup/nodes/FormElement.java
88a89
>             if (type.equalsIgnoreCase("button")) continue; // browsers don't submit these
Jsoup-93 is one-line patch!

checking JxPath/1
JxPath-1 is multi-file patch!

checking JxPath/10
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/10/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
42c42
<         return compute(args[0].computeValue(context), args[1].computeValue(context)) 
---
>         return compute(args[0].compute(context), args[1].compute(context))
JxPath-10 is one-line patch!

checking JxPath/11
JxPath-11 is multi-file patch!

checking JxPath/12
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/12/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
108c108,109
<                 return equalStrings(namespaceURI, nodeNS);
---
>                 return equalStrings(namespaceURI, nodeNS) || nodeNS == null
>                         && equalStrings(testPrefix, getPrefix(node));
JxPath-12 is multi-line patch!

checking JxPath/13
JxPath-13 is multi-file patch!

checking JxPath/14
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/14/src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java src/java/org/apache/commons/jxpath/ri/compiler/CoreFunction.java
655a656,658
>         if (Double.isNaN(v) || Double.isInfinite(v)) {
>         	return new Double(v);
>         }
661a665,667
>         if (Double.isNaN(v) || Double.isInfinite(v)) {
>         	return new Double(v);
>         }
667a674,676
>         if (Double.isNaN(v) || Double.isInfinite(v)) {
>         	return new Double(v);
>         }
JxPath-14 is multi-line patch!

checking JxPath/15
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/15/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java
19a20
> import java.util.Iterator;
21a23
> import org.apache.commons.jxpath.Pointer;
56d57
<                             nodeSet.add(ptr);
61a63,67
>             sortPointers(pointers);
> 
>             for (Iterator it = pointers.iterator(); it.hasNext();) {
>                 nodeSet.add((Pointer) it.next());
>             }
65c71
< }
---
> }
\ No newline at end of file
JxPath-15 is multi-line patch!

checking JxPath/16
JxPath-16 is multi-file patch!

checking JxPath/17
JxPath-17 is multi-file patch!

checking JxPath/18
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java
18a19
> import org.apache.commons.jxpath.ri.Compiler;
22a24
> import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
32a35
>     private static final NodeNameTest WILDCARD_TEST = new NodeNameTest(new QName(null, "*"));
75c78,87
<             if (!(nodeTest instanceof NodeNameTest)) {
---
>             NodeNameTest nodeNameTest = null;
>             if (nodeTest instanceof NodeTypeTest) {
>                 if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) {
>                     nodeNameTest = WILDCARD_TEST;
>                 }
>             }
>             else if (nodeTest instanceof NodeNameTest) {
>                 nodeNameTest = (NodeNameTest) nodeTest;
>             }
>             if (nodeNameTest == null) {
78,80c90,91
<             QName name = ((NodeNameTest) nodeTest).getNodeName();
<             iterator =
<                 parentContext.getCurrentNodePointer().attributeIterator(name);
---
>             iterator = parentContext.getCurrentNodePointer().attributeIterator(
>                     nodeNameTest.getNodeName());
91c102
< }
---
> }
\ No newline at end of file
JxPath-18 is multi-line patch!

checking JxPath/19
JxPath-19 is multi-file patch!

checking JxPath/2
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java src/java/org/apache/commons/jxpath/ri/compiler/Expression.java
18a19
> import org.apache.commons.jxpath.NodeSet;
76a78,80
>         if (result instanceof NodeSet) {
>             return new ValueIterator(((NodeSet) result).getPointers().iterator());
>         }
87a92,96
>         if (result instanceof NodeSet) {
>             return new PointerIterator(((NodeSet) result).getPointers().iterator(),
>                     new QName(null, "value"),
>                     context.getRootContext().getCurrentNodePointer().getLocale());
>         }
145c154
< }
---
> }
\ No newline at end of file
JxPath-2 is multi-line patch!

checking JxPath/20
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/20/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
88c88
<             return containsMatch((Iterator) right, left);
---
>             return containsMatch(left, (Iterator) right);
137a138,146
>     private boolean containsMatch(Object value, Iterator it) {
>         while (it.hasNext()) {
>             Object element = it.next();
>             if (compute(value, element)) {
>                 return true;
>             }
>         }
>         return false;
>     }
JxPath-20 is multi-line patch!

checking JxPath/21
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/21/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java
152c152,153
<         return ValueUtils.getLength(getBaseValue());
---
>         Object baseValue = getBaseValue();
>         return baseValue == null ? 1 : ValueUtils.getLength(baseValue);
JxPath-21 is multi-line patch!

checking JxPath/22
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/22/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java
689c689,690
<                         return attr.getValue();
---
>                         uri = attr.getValue();
>                         break;
694d694
<             return null;
696c696
<         return uri;
---
>         return "".equals(uri) ? null : uri;
JxPath-22 is multi-line patch!

checking JxPath/3
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java
18a19,20
> import org.apache.commons.jxpath.AbstractFactory;
> import org.apache.commons.jxpath.JXPathAbstractFactoryException;
108a111,113
>             if (parent instanceof NullPointer && parent.equals(newParent)) {
>                 throw createBadFactoryException(context.getFactory());
>             }
137a143,145
>             if (parent instanceof NullPointer && parent.equals(newParent)) {
>                 throw createBadFactoryException(context.getFactory());
>             }
224c232,238
< }
---
> 
>     private JXPathAbstractFactoryException createBadFactoryException(AbstractFactory factory) {
>         return new JXPathAbstractFactoryException("Factory " + factory
>                 + " reported success creating object for path: " + asPath()
>                 + " but object was null.  Terminating to avoid stack recursion.");
>     }
> }
\ No newline at end of file
JxPath-3 is multi-line patch!

checking JxPath/4
JxPath-4 is multi-file patch!

checking JxPath/5
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/5/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java src/java/org/apache/commons/jxpath/ri/model/NodePointer.java
665,667c665
<             throw new JXPathException(
<                     "Cannot compare pointers that do not belong to the same tree: '"
<                             + p1 + "' and '" + p2 + "'");
---
>             return 0;
JxPath-5 is multi-line patch!

checking JxPath/6
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/6/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java
57c57,61
<         if (l instanceof InitialContext || l instanceof SelfContext) {
---
>         if (l instanceof InitialContext) {
>             ((EvalContext) l).reset();
>         }
> 
>         if (l instanceof SelfContext) {
61c65,69
<         if (r instanceof InitialContext || r instanceof SelfContext) {
---
>         if (r instanceof InitialContext) {
>             ((EvalContext) r).reset();
>         }
> 
>         if (r instanceof SelfContext) {
JxPath-6 is multi-line patch!

checking JxPath/7
JxPath-7 is multi-file patch!

checking JxPath/8
diff /home/yicheng/research/apr/experiments/uniapr-consistency/d4j_projects/JxPath/8/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java
75a76,78
>         if (Double.isNaN(ld)) {
>             return false;
>         }
76a80,82
>         if (Double.isNaN(rd)) {
>             return false;
>         }
JxPath-8 is multi-line patch!

checking JxPath/9
JxPath-9 is multi-file patch!
